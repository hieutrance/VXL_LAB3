
LAB3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ae0  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002bec  08002bec  00003bec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c10  08002c10  00004058  2**0
                  CONTENTS
  4 .ARM          00000000  08002c10  08002c10  00004058  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002c10  08002c10  00004058  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c10  08002c10  00003c10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002c14  08002c14  00003c14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000058  20000000  08002c18  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000cc  20000058  08002c70  00004058  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000124  08002c70  00004124  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00004058  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000869a  00000000  00000000  00004081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c9a  00000000  00000000  0000c71b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a40  00000000  00000000  0000e3b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007be  00000000  00000000  0000edf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00008412  00000000  00000000  0000f5b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00002df8  00000000  00000000  000179c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  0001a7c0  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000283c  00000000  00000000  0001a804  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 0000006a  00000000  00000000  0001d040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000058 	.word	0x20000058
 8000128:	00000000 	.word	0x00000000
 800012c:	08002bd4 	.word	0x08002bd4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000005c 	.word	0x2000005c
 8000148:	08002bd4 	.word	0x08002bd4

0800014c <isButtonPressed>:
int TimerForKeyPress[NUM_OF_BUTTONS] = {200, 200, 200};

int Pressed_flag[NUM_OF_BUTTONS] = {0};
int LongPressed_flag[NUM_OF_BUTTONS] = {0};

int isButtonPressed(int num){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if(Pressed_flag[num] == 1){
 8000154:	4a09      	ldr	r2, [pc, #36]	@ (800017c <isButtonPressed+0x30>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800015c:	2b01      	cmp	r3, #1
 800015e:	d106      	bne.n	800016e <isButtonPressed+0x22>
		Pressed_flag[num] = 0;
 8000160:	4a06      	ldr	r2, [pc, #24]	@ (800017c <isButtonPressed+0x30>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	2100      	movs	r1, #0
 8000166:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800016a:	2301      	movs	r3, #1
 800016c:	e000      	b.n	8000170 <isButtonPressed+0x24>
	}
	return 0;
 800016e:	2300      	movs	r3, #0
}
 8000170:	4618      	mov	r0, r3
 8000172:	370c      	adds	r7, #12
 8000174:	46bd      	mov	sp, r7
 8000176:	bc80      	pop	{r7}
 8000178:	4770      	bx	lr
 800017a:	bf00      	nop
 800017c:	20000074 	.word	0x20000074

08000180 <isButtonLongPressed>:

int isButtonLongPressed(int num){
 8000180:	b480      	push	{r7}
 8000182:	b083      	sub	sp, #12
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
	if(LongPressed_flag[num] == 1){
 8000188:	4a09      	ldr	r2, [pc, #36]	@ (80001b0 <isButtonLongPressed+0x30>)
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000190:	2b01      	cmp	r3, #1
 8000192:	d106      	bne.n	80001a2 <isButtonLongPressed+0x22>
		LongPressed_flag[num] = 0;
 8000194:	4a06      	ldr	r2, [pc, #24]	@ (80001b0 <isButtonLongPressed+0x30>)
 8000196:	687b      	ldr	r3, [r7, #4]
 8000198:	2100      	movs	r1, #0
 800019a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800019e:	2301      	movs	r3, #1
 80001a0:	e000      	b.n	80001a4 <isButtonLongPressed+0x24>
	}
	return 0;
 80001a2:	2300      	movs	r3, #0
}
 80001a4:	4618      	mov	r0, r3
 80001a6:	370c      	adds	r7, #12
 80001a8:	46bd      	mov	sp, r7
 80001aa:	bc80      	pop	{r7}
 80001ac:	4770      	bx	lr
 80001ae:	bf00      	nop
 80001b0:	20000080 	.word	0x20000080

080001b4 <getKeyInput>:

void getKeyInput() {
 80001b4:	b580      	push	{r7, lr}
 80001b6:	b082      	sub	sp, #8
 80001b8:	af00      	add	r7, sp, #0
    for (int i = 0; i < NUM_OF_BUTTONS; i++) {
 80001ba:	2300      	movs	r3, #0
 80001bc:	607b      	str	r3, [r7, #4]
 80001be:	e08f      	b.n	80002e0 <getKeyInput+0x12c>
        KeyReg0[i] = KeyReg1[i];
 80001c0:	4a4c      	ldr	r2, [pc, #304]	@ (80002f4 <getKeyInput+0x140>)
 80001c2:	687b      	ldr	r3, [r7, #4]
 80001c4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001c8:	494b      	ldr	r1, [pc, #300]	@ (80002f8 <getKeyInput+0x144>)
 80001ca:	687b      	ldr	r3, [r7, #4]
 80001cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        KeyReg1[i] = KeyReg2[i];
 80001d0:	4a4a      	ldr	r2, [pc, #296]	@ (80002fc <getKeyInput+0x148>)
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001d8:	4946      	ldr	r1, [pc, #280]	@ (80002f4 <getKeyInput+0x140>)
 80001da:	687b      	ldr	r3, [r7, #4]
 80001dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        if (i == MODE_BUTTON) {
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	2b00      	cmp	r3, #0
 80001e4:	d10a      	bne.n	80001fc <getKeyInput+0x48>
            KeyReg2[i] = HAL_GPIO_ReadPin(MODE_BUTTON_GPIO_Port, MODE_BUTTON_Pin);
 80001e6:	2104      	movs	r1, #4
 80001e8:	4845      	ldr	r0, [pc, #276]	@ (8000300 <getKeyInput+0x14c>)
 80001ea:	f001 fcc5 	bl	8001b78 <HAL_GPIO_ReadPin>
 80001ee:	4603      	mov	r3, r0
 80001f0:	4619      	mov	r1, r3
 80001f2:	4a42      	ldr	r2, [pc, #264]	@ (80002fc <getKeyInput+0x148>)
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80001fa:	e01a      	b.n	8000232 <getKeyInput+0x7e>
        } else if (i == MODIFY_BUTTON) {
 80001fc:	687b      	ldr	r3, [r7, #4]
 80001fe:	2b01      	cmp	r3, #1
 8000200:	d10a      	bne.n	8000218 <getKeyInput+0x64>
            KeyReg2[i] = HAL_GPIO_ReadPin(MODIFY_BUTTON_GPIO_Port, MODIFY_BUTTON_Pin);
 8000202:	2108      	movs	r1, #8
 8000204:	483e      	ldr	r0, [pc, #248]	@ (8000300 <getKeyInput+0x14c>)
 8000206:	f001 fcb7 	bl	8001b78 <HAL_GPIO_ReadPin>
 800020a:	4603      	mov	r3, r0
 800020c:	4619      	mov	r1, r3
 800020e:	4a3b      	ldr	r2, [pc, #236]	@ (80002fc <getKeyInput+0x148>)
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000216:	e00c      	b.n	8000232 <getKeyInput+0x7e>
        } else if (i == SET_BUTTON) {
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	2b02      	cmp	r3, #2
 800021c:	d109      	bne.n	8000232 <getKeyInput+0x7e>
            KeyReg2[i] = HAL_GPIO_ReadPin(SET_BUTTON_GPIO_Port, SET_BUTTON_Pin);
 800021e:	2110      	movs	r1, #16
 8000220:	4837      	ldr	r0, [pc, #220]	@ (8000300 <getKeyInput+0x14c>)
 8000222:	f001 fca9 	bl	8001b78 <HAL_GPIO_ReadPin>
 8000226:	4603      	mov	r3, r0
 8000228:	4619      	mov	r1, r3
 800022a:	4a34      	ldr	r2, [pc, #208]	@ (80002fc <getKeyInput+0x148>)
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        }

        if ((KeyReg0[i] == KeyReg1[i]) && (KeyReg1[i] == KeyReg2[i])) {
 8000232:	4a31      	ldr	r2, [pc, #196]	@ (80002f8 <getKeyInput+0x144>)
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800023a:	492e      	ldr	r1, [pc, #184]	@ (80002f4 <getKeyInput+0x140>)
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000242:	429a      	cmp	r2, r3
 8000244:	d149      	bne.n	80002da <getKeyInput+0x126>
 8000246:	4a2b      	ldr	r2, [pc, #172]	@ (80002f4 <getKeyInput+0x140>)
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800024e:	492b      	ldr	r1, [pc, #172]	@ (80002fc <getKeyInput+0x148>)
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000256:	429a      	cmp	r2, r3
 8000258:	d13f      	bne.n	80002da <getKeyInput+0x126>
            if (KeyReg2[i] == PRESSED_STATE) {
 800025a:	4a28      	ldr	r2, [pc, #160]	@ (80002fc <getKeyInput+0x148>)
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000262:	2b00      	cmp	r3, #0
 8000264:	d12f      	bne.n	80002c6 <getKeyInput+0x112>
                if (KeyReg3[i] != PRESSED_STATE) { // Phát hiện nhấn ngắn
 8000266:	4a27      	ldr	r2, [pc, #156]	@ (8000304 <getKeyInput+0x150>)
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800026e:	2b00      	cmp	r3, #0
 8000270:	d00f      	beq.n	8000292 <getKeyInput+0xde>
                    Pressed_flag[i] = 1;
 8000272:	4a25      	ldr	r2, [pc, #148]	@ (8000308 <getKeyInput+0x154>)
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	2101      	movs	r1, #1
 8000278:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    KeyReg3[i] = PRESSED_STATE;
 800027c:	4a21      	ldr	r2, [pc, #132]	@ (8000304 <getKeyInput+0x150>)
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	2100      	movs	r1, #0
 8000282:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    TimerForKeyPress[i] = 200;
 8000286:	4a21      	ldr	r2, [pc, #132]	@ (800030c <getKeyInput+0x158>)
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	21c8      	movs	r1, #200	@ 0xc8
 800028c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000290:	e023      	b.n	80002da <getKeyInput+0x126>
                } else { // Xử lý nhấn giữ
                    TimerForKeyPress[i]--;
 8000292:	4a1e      	ldr	r2, [pc, #120]	@ (800030c <getKeyInput+0x158>)
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800029a:	1e5a      	subs	r2, r3, #1
 800029c:	491b      	ldr	r1, [pc, #108]	@ (800030c <getKeyInput+0x158>)
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    if (TimerForKeyPress[i] == 0) {
 80002a4:	4a19      	ldr	r2, [pc, #100]	@ (800030c <getKeyInput+0x158>)
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d114      	bne.n	80002da <getKeyInput+0x126>
                        LongPressed_flag[i] = 1;
 80002b0:	4a17      	ldr	r2, [pc, #92]	@ (8000310 <getKeyInput+0x15c>)
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	2101      	movs	r1, #1
 80002b6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                        TimerForKeyPress[i] = 200;
 80002ba:	4a14      	ldr	r2, [pc, #80]	@ (800030c <getKeyInput+0x158>)
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	21c8      	movs	r1, #200	@ 0xc8
 80002c0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80002c4:	e009      	b.n	80002da <getKeyInput+0x126>
                    }
                }
            } else { // Nút không được nhấn
                KeyReg3[i] = NORMAL_STATE;
 80002c6:	4a0f      	ldr	r2, [pc, #60]	@ (8000304 <getKeyInput+0x150>)
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	2101      	movs	r1, #1
 80002cc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                TimerForKeyPress[i] = 200; // Reset bộ đếm
 80002d0:	4a0e      	ldr	r2, [pc, #56]	@ (800030c <getKeyInput+0x158>)
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	21c8      	movs	r1, #200	@ 0xc8
 80002d6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (int i = 0; i < NUM_OF_BUTTONS; i++) {
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	3301      	adds	r3, #1
 80002de:	607b      	str	r3, [r7, #4]
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	2b02      	cmp	r3, #2
 80002e4:	f77f af6c 	ble.w	80001c0 <getKeyInput+0xc>
            }
        }
    }
}
 80002e8:	bf00      	nop
 80002ea:	bf00      	nop
 80002ec:	3708      	adds	r7, #8
 80002ee:	46bd      	mov	sp, r7
 80002f0:	bd80      	pop	{r7, pc}
 80002f2:	bf00      	nop
 80002f4:	2000000c 	.word	0x2000000c
 80002f8:	20000000 	.word	0x20000000
 80002fc:	20000018 	.word	0x20000018
 8000300:	40010800 	.word	0x40010800
 8000304:	20000024 	.word	0x20000024
 8000308:	20000074 	.word	0x20000074
 800030c:	20000030 	.word	0x20000030
 8000310:	20000080 	.word	0x20000080

08000314 <display7SegLed>:
#include "display7SegLed.h"

int led_buffer[4] = {0};
int led_extra_buffer[4]={0};

void display7SegLed(int num){
 8000314:	b580      	push	{r7, lr}
 8000316:	b082      	sub	sp, #8
 8000318:	af00      	add	r7, sp, #0
 800031a:	6078      	str	r0, [r7, #4]
	switch(num){
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	2b09      	cmp	r3, #9
 8000320:	f200 8180 	bhi.w	8000624 <display7SegLed+0x310>
 8000324:	a201      	add	r2, pc, #4	@ (adr r2, 800032c <display7SegLed+0x18>)
 8000326:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800032a:	bf00      	nop
 800032c:	08000355 	.word	0x08000355
 8000330:	0800039d 	.word	0x0800039d
 8000334:	080003e5 	.word	0x080003e5
 8000338:	0800042d 	.word	0x0800042d
 800033c:	08000475 	.word	0x08000475
 8000340:	080004bd 	.word	0x080004bd
 8000344:	08000505 	.word	0x08000505
 8000348:	0800054d 	.word	0x0800054d
 800034c:	08000595 	.word	0x08000595
 8000350:	080005dd 	.word	0x080005dd
	case 0:
		HAL_GPIO_WritePin(a_GPIO_Port , a_Pin , RESET);
 8000354:	2200      	movs	r2, #0
 8000356:	2101      	movs	r1, #1
 8000358:	48b5      	ldr	r0, [pc, #724]	@ (8000630 <display7SegLed+0x31c>)
 800035a:	f001 fc24 	bl	8001ba6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(b_GPIO_Port , b_Pin , RESET);
 800035e:	2200      	movs	r2, #0
 8000360:	2102      	movs	r1, #2
 8000362:	48b3      	ldr	r0, [pc, #716]	@ (8000630 <display7SegLed+0x31c>)
 8000364:	f001 fc1f 	bl	8001ba6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(c_GPIO_Port , c_Pin , RESET);
 8000368:	2200      	movs	r2, #0
 800036a:	2104      	movs	r1, #4
 800036c:	48b0      	ldr	r0, [pc, #704]	@ (8000630 <display7SegLed+0x31c>)
 800036e:	f001 fc1a 	bl	8001ba6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(d_GPIO_Port , d_Pin , RESET);
 8000372:	2200      	movs	r2, #0
 8000374:	2108      	movs	r1, #8
 8000376:	48ae      	ldr	r0, [pc, #696]	@ (8000630 <display7SegLed+0x31c>)
 8000378:	f001 fc15 	bl	8001ba6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(e_GPIO_Port , e_Pin , RESET);
 800037c:	2200      	movs	r2, #0
 800037e:	2110      	movs	r1, #16
 8000380:	48ab      	ldr	r0, [pc, #684]	@ (8000630 <display7SegLed+0x31c>)
 8000382:	f001 fc10 	bl	8001ba6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(f_GPIO_Port , f_Pin , RESET);
 8000386:	2200      	movs	r2, #0
 8000388:	2120      	movs	r1, #32
 800038a:	48a9      	ldr	r0, [pc, #676]	@ (8000630 <display7SegLed+0x31c>)
 800038c:	f001 fc0b 	bl	8001ba6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(g_GPIO_Port , g_Pin , SET);
 8000390:	2201      	movs	r2, #1
 8000392:	2140      	movs	r1, #64	@ 0x40
 8000394:	48a6      	ldr	r0, [pc, #664]	@ (8000630 <display7SegLed+0x31c>)
 8000396:	f001 fc06 	bl	8001ba6 <HAL_GPIO_WritePin>
		break;
 800039a:	e144      	b.n	8000626 <display7SegLed+0x312>
	case 1:
		HAL_GPIO_WritePin(a_GPIO_Port , a_Pin , SET);
 800039c:	2201      	movs	r2, #1
 800039e:	2101      	movs	r1, #1
 80003a0:	48a3      	ldr	r0, [pc, #652]	@ (8000630 <display7SegLed+0x31c>)
 80003a2:	f001 fc00 	bl	8001ba6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(b_GPIO_Port , b_Pin , RESET);
 80003a6:	2200      	movs	r2, #0
 80003a8:	2102      	movs	r1, #2
 80003aa:	48a1      	ldr	r0, [pc, #644]	@ (8000630 <display7SegLed+0x31c>)
 80003ac:	f001 fbfb 	bl	8001ba6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(c_GPIO_Port , c_Pin , RESET);
 80003b0:	2200      	movs	r2, #0
 80003b2:	2104      	movs	r1, #4
 80003b4:	489e      	ldr	r0, [pc, #632]	@ (8000630 <display7SegLed+0x31c>)
 80003b6:	f001 fbf6 	bl	8001ba6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(d_GPIO_Port , d_Pin , SET);
 80003ba:	2201      	movs	r2, #1
 80003bc:	2108      	movs	r1, #8
 80003be:	489c      	ldr	r0, [pc, #624]	@ (8000630 <display7SegLed+0x31c>)
 80003c0:	f001 fbf1 	bl	8001ba6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(e_GPIO_Port , e_Pin , SET);
 80003c4:	2201      	movs	r2, #1
 80003c6:	2110      	movs	r1, #16
 80003c8:	4899      	ldr	r0, [pc, #612]	@ (8000630 <display7SegLed+0x31c>)
 80003ca:	f001 fbec 	bl	8001ba6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(f_GPIO_Port , f_Pin , SET);
 80003ce:	2201      	movs	r2, #1
 80003d0:	2120      	movs	r1, #32
 80003d2:	4897      	ldr	r0, [pc, #604]	@ (8000630 <display7SegLed+0x31c>)
 80003d4:	f001 fbe7 	bl	8001ba6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(g_GPIO_Port , g_Pin , SET);
 80003d8:	2201      	movs	r2, #1
 80003da:	2140      	movs	r1, #64	@ 0x40
 80003dc:	4894      	ldr	r0, [pc, #592]	@ (8000630 <display7SegLed+0x31c>)
 80003de:	f001 fbe2 	bl	8001ba6 <HAL_GPIO_WritePin>
		break;
 80003e2:	e120      	b.n	8000626 <display7SegLed+0x312>
	case 2:
		HAL_GPIO_WritePin(a_GPIO_Port , a_Pin , RESET);
 80003e4:	2200      	movs	r2, #0
 80003e6:	2101      	movs	r1, #1
 80003e8:	4891      	ldr	r0, [pc, #580]	@ (8000630 <display7SegLed+0x31c>)
 80003ea:	f001 fbdc 	bl	8001ba6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(b_GPIO_Port , b_Pin , RESET);
 80003ee:	2200      	movs	r2, #0
 80003f0:	2102      	movs	r1, #2
 80003f2:	488f      	ldr	r0, [pc, #572]	@ (8000630 <display7SegLed+0x31c>)
 80003f4:	f001 fbd7 	bl	8001ba6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(c_GPIO_Port , c_Pin , SET);
 80003f8:	2201      	movs	r2, #1
 80003fa:	2104      	movs	r1, #4
 80003fc:	488c      	ldr	r0, [pc, #560]	@ (8000630 <display7SegLed+0x31c>)
 80003fe:	f001 fbd2 	bl	8001ba6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(d_GPIO_Port , d_Pin , RESET);
 8000402:	2200      	movs	r2, #0
 8000404:	2108      	movs	r1, #8
 8000406:	488a      	ldr	r0, [pc, #552]	@ (8000630 <display7SegLed+0x31c>)
 8000408:	f001 fbcd 	bl	8001ba6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(e_GPIO_Port , e_Pin , RESET);
 800040c:	2200      	movs	r2, #0
 800040e:	2110      	movs	r1, #16
 8000410:	4887      	ldr	r0, [pc, #540]	@ (8000630 <display7SegLed+0x31c>)
 8000412:	f001 fbc8 	bl	8001ba6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(f_GPIO_Port , f_Pin , SET);
 8000416:	2201      	movs	r2, #1
 8000418:	2120      	movs	r1, #32
 800041a:	4885      	ldr	r0, [pc, #532]	@ (8000630 <display7SegLed+0x31c>)
 800041c:	f001 fbc3 	bl	8001ba6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(g_GPIO_Port , g_Pin , RESET);
 8000420:	2200      	movs	r2, #0
 8000422:	2140      	movs	r1, #64	@ 0x40
 8000424:	4882      	ldr	r0, [pc, #520]	@ (8000630 <display7SegLed+0x31c>)
 8000426:	f001 fbbe 	bl	8001ba6 <HAL_GPIO_WritePin>
		break;
 800042a:	e0fc      	b.n	8000626 <display7SegLed+0x312>
	case 3:
		HAL_GPIO_WritePin(a_GPIO_Port , a_Pin , RESET);
 800042c:	2200      	movs	r2, #0
 800042e:	2101      	movs	r1, #1
 8000430:	487f      	ldr	r0, [pc, #508]	@ (8000630 <display7SegLed+0x31c>)
 8000432:	f001 fbb8 	bl	8001ba6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(b_GPIO_Port , b_Pin , RESET);
 8000436:	2200      	movs	r2, #0
 8000438:	2102      	movs	r1, #2
 800043a:	487d      	ldr	r0, [pc, #500]	@ (8000630 <display7SegLed+0x31c>)
 800043c:	f001 fbb3 	bl	8001ba6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(c_GPIO_Port , c_Pin , RESET);
 8000440:	2200      	movs	r2, #0
 8000442:	2104      	movs	r1, #4
 8000444:	487a      	ldr	r0, [pc, #488]	@ (8000630 <display7SegLed+0x31c>)
 8000446:	f001 fbae 	bl	8001ba6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(d_GPIO_Port , d_Pin , RESET);
 800044a:	2200      	movs	r2, #0
 800044c:	2108      	movs	r1, #8
 800044e:	4878      	ldr	r0, [pc, #480]	@ (8000630 <display7SegLed+0x31c>)
 8000450:	f001 fba9 	bl	8001ba6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(e_GPIO_Port , e_Pin , SET);
 8000454:	2201      	movs	r2, #1
 8000456:	2110      	movs	r1, #16
 8000458:	4875      	ldr	r0, [pc, #468]	@ (8000630 <display7SegLed+0x31c>)
 800045a:	f001 fba4 	bl	8001ba6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(f_GPIO_Port , f_Pin , SET);
 800045e:	2201      	movs	r2, #1
 8000460:	2120      	movs	r1, #32
 8000462:	4873      	ldr	r0, [pc, #460]	@ (8000630 <display7SegLed+0x31c>)
 8000464:	f001 fb9f 	bl	8001ba6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(g_GPIO_Port , g_Pin , RESET);
 8000468:	2200      	movs	r2, #0
 800046a:	2140      	movs	r1, #64	@ 0x40
 800046c:	4870      	ldr	r0, [pc, #448]	@ (8000630 <display7SegLed+0x31c>)
 800046e:	f001 fb9a 	bl	8001ba6 <HAL_GPIO_WritePin>
		break;
 8000472:	e0d8      	b.n	8000626 <display7SegLed+0x312>
	case 4:
		HAL_GPIO_WritePin(a_GPIO_Port , a_Pin , SET);
 8000474:	2201      	movs	r2, #1
 8000476:	2101      	movs	r1, #1
 8000478:	486d      	ldr	r0, [pc, #436]	@ (8000630 <display7SegLed+0x31c>)
 800047a:	f001 fb94 	bl	8001ba6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(b_GPIO_Port , b_Pin , RESET);
 800047e:	2200      	movs	r2, #0
 8000480:	2102      	movs	r1, #2
 8000482:	486b      	ldr	r0, [pc, #428]	@ (8000630 <display7SegLed+0x31c>)
 8000484:	f001 fb8f 	bl	8001ba6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(c_GPIO_Port , c_Pin , RESET);
 8000488:	2200      	movs	r2, #0
 800048a:	2104      	movs	r1, #4
 800048c:	4868      	ldr	r0, [pc, #416]	@ (8000630 <display7SegLed+0x31c>)
 800048e:	f001 fb8a 	bl	8001ba6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(d_GPIO_Port , d_Pin , SET);
 8000492:	2201      	movs	r2, #1
 8000494:	2108      	movs	r1, #8
 8000496:	4866      	ldr	r0, [pc, #408]	@ (8000630 <display7SegLed+0x31c>)
 8000498:	f001 fb85 	bl	8001ba6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(e_GPIO_Port , e_Pin , SET);
 800049c:	2201      	movs	r2, #1
 800049e:	2110      	movs	r1, #16
 80004a0:	4863      	ldr	r0, [pc, #396]	@ (8000630 <display7SegLed+0x31c>)
 80004a2:	f001 fb80 	bl	8001ba6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(f_GPIO_Port , f_Pin , RESET);
 80004a6:	2200      	movs	r2, #0
 80004a8:	2120      	movs	r1, #32
 80004aa:	4861      	ldr	r0, [pc, #388]	@ (8000630 <display7SegLed+0x31c>)
 80004ac:	f001 fb7b 	bl	8001ba6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(g_GPIO_Port , g_Pin , RESET);
 80004b0:	2200      	movs	r2, #0
 80004b2:	2140      	movs	r1, #64	@ 0x40
 80004b4:	485e      	ldr	r0, [pc, #376]	@ (8000630 <display7SegLed+0x31c>)
 80004b6:	f001 fb76 	bl	8001ba6 <HAL_GPIO_WritePin>
		break;
 80004ba:	e0b4      	b.n	8000626 <display7SegLed+0x312>
	case 5:
		HAL_GPIO_WritePin(a_GPIO_Port , a_Pin , RESET);
 80004bc:	2200      	movs	r2, #0
 80004be:	2101      	movs	r1, #1
 80004c0:	485b      	ldr	r0, [pc, #364]	@ (8000630 <display7SegLed+0x31c>)
 80004c2:	f001 fb70 	bl	8001ba6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(b_GPIO_Port , b_Pin , SET);
 80004c6:	2201      	movs	r2, #1
 80004c8:	2102      	movs	r1, #2
 80004ca:	4859      	ldr	r0, [pc, #356]	@ (8000630 <display7SegLed+0x31c>)
 80004cc:	f001 fb6b 	bl	8001ba6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(c_GPIO_Port , c_Pin , RESET);
 80004d0:	2200      	movs	r2, #0
 80004d2:	2104      	movs	r1, #4
 80004d4:	4856      	ldr	r0, [pc, #344]	@ (8000630 <display7SegLed+0x31c>)
 80004d6:	f001 fb66 	bl	8001ba6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(d_GPIO_Port , d_Pin , RESET);
 80004da:	2200      	movs	r2, #0
 80004dc:	2108      	movs	r1, #8
 80004de:	4854      	ldr	r0, [pc, #336]	@ (8000630 <display7SegLed+0x31c>)
 80004e0:	f001 fb61 	bl	8001ba6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(e_GPIO_Port , e_Pin , SET);
 80004e4:	2201      	movs	r2, #1
 80004e6:	2110      	movs	r1, #16
 80004e8:	4851      	ldr	r0, [pc, #324]	@ (8000630 <display7SegLed+0x31c>)
 80004ea:	f001 fb5c 	bl	8001ba6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(f_GPIO_Port , f_Pin , RESET);
 80004ee:	2200      	movs	r2, #0
 80004f0:	2120      	movs	r1, #32
 80004f2:	484f      	ldr	r0, [pc, #316]	@ (8000630 <display7SegLed+0x31c>)
 80004f4:	f001 fb57 	bl	8001ba6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(g_GPIO_Port , g_Pin , RESET);
 80004f8:	2200      	movs	r2, #0
 80004fa:	2140      	movs	r1, #64	@ 0x40
 80004fc:	484c      	ldr	r0, [pc, #304]	@ (8000630 <display7SegLed+0x31c>)
 80004fe:	f001 fb52 	bl	8001ba6 <HAL_GPIO_WritePin>
		break;
 8000502:	e090      	b.n	8000626 <display7SegLed+0x312>
	case 6:
		HAL_GPIO_WritePin(a_GPIO_Port , a_Pin , RESET);
 8000504:	2200      	movs	r2, #0
 8000506:	2101      	movs	r1, #1
 8000508:	4849      	ldr	r0, [pc, #292]	@ (8000630 <display7SegLed+0x31c>)
 800050a:	f001 fb4c 	bl	8001ba6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(b_GPIO_Port , b_Pin , SET);
 800050e:	2201      	movs	r2, #1
 8000510:	2102      	movs	r1, #2
 8000512:	4847      	ldr	r0, [pc, #284]	@ (8000630 <display7SegLed+0x31c>)
 8000514:	f001 fb47 	bl	8001ba6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(c_GPIO_Port , c_Pin , RESET);
 8000518:	2200      	movs	r2, #0
 800051a:	2104      	movs	r1, #4
 800051c:	4844      	ldr	r0, [pc, #272]	@ (8000630 <display7SegLed+0x31c>)
 800051e:	f001 fb42 	bl	8001ba6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(d_GPIO_Port , d_Pin , RESET);
 8000522:	2200      	movs	r2, #0
 8000524:	2108      	movs	r1, #8
 8000526:	4842      	ldr	r0, [pc, #264]	@ (8000630 <display7SegLed+0x31c>)
 8000528:	f001 fb3d 	bl	8001ba6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(e_GPIO_Port , e_Pin , RESET);
 800052c:	2200      	movs	r2, #0
 800052e:	2110      	movs	r1, #16
 8000530:	483f      	ldr	r0, [pc, #252]	@ (8000630 <display7SegLed+0x31c>)
 8000532:	f001 fb38 	bl	8001ba6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(f_GPIO_Port , f_Pin , RESET);
 8000536:	2200      	movs	r2, #0
 8000538:	2120      	movs	r1, #32
 800053a:	483d      	ldr	r0, [pc, #244]	@ (8000630 <display7SegLed+0x31c>)
 800053c:	f001 fb33 	bl	8001ba6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(g_GPIO_Port , g_Pin , RESET);
 8000540:	2200      	movs	r2, #0
 8000542:	2140      	movs	r1, #64	@ 0x40
 8000544:	483a      	ldr	r0, [pc, #232]	@ (8000630 <display7SegLed+0x31c>)
 8000546:	f001 fb2e 	bl	8001ba6 <HAL_GPIO_WritePin>
		break;
 800054a:	e06c      	b.n	8000626 <display7SegLed+0x312>
	case 7:
		HAL_GPIO_WritePin(a_GPIO_Port , a_Pin , RESET);
 800054c:	2200      	movs	r2, #0
 800054e:	2101      	movs	r1, #1
 8000550:	4837      	ldr	r0, [pc, #220]	@ (8000630 <display7SegLed+0x31c>)
 8000552:	f001 fb28 	bl	8001ba6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(b_GPIO_Port , b_Pin , RESET);
 8000556:	2200      	movs	r2, #0
 8000558:	2102      	movs	r1, #2
 800055a:	4835      	ldr	r0, [pc, #212]	@ (8000630 <display7SegLed+0x31c>)
 800055c:	f001 fb23 	bl	8001ba6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(c_GPIO_Port , c_Pin , RESET);
 8000560:	2200      	movs	r2, #0
 8000562:	2104      	movs	r1, #4
 8000564:	4832      	ldr	r0, [pc, #200]	@ (8000630 <display7SegLed+0x31c>)
 8000566:	f001 fb1e 	bl	8001ba6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(d_GPIO_Port , d_Pin , SET);
 800056a:	2201      	movs	r2, #1
 800056c:	2108      	movs	r1, #8
 800056e:	4830      	ldr	r0, [pc, #192]	@ (8000630 <display7SegLed+0x31c>)
 8000570:	f001 fb19 	bl	8001ba6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(e_GPIO_Port , e_Pin , SET);
 8000574:	2201      	movs	r2, #1
 8000576:	2110      	movs	r1, #16
 8000578:	482d      	ldr	r0, [pc, #180]	@ (8000630 <display7SegLed+0x31c>)
 800057a:	f001 fb14 	bl	8001ba6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(f_GPIO_Port , f_Pin , SET);
 800057e:	2201      	movs	r2, #1
 8000580:	2120      	movs	r1, #32
 8000582:	482b      	ldr	r0, [pc, #172]	@ (8000630 <display7SegLed+0x31c>)
 8000584:	f001 fb0f 	bl	8001ba6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(g_GPIO_Port , g_Pin , SET);
 8000588:	2201      	movs	r2, #1
 800058a:	2140      	movs	r1, #64	@ 0x40
 800058c:	4828      	ldr	r0, [pc, #160]	@ (8000630 <display7SegLed+0x31c>)
 800058e:	f001 fb0a 	bl	8001ba6 <HAL_GPIO_WritePin>
		break;
 8000592:	e048      	b.n	8000626 <display7SegLed+0x312>
	case 8:
		HAL_GPIO_WritePin(a_GPIO_Port , a_Pin , RESET);
 8000594:	2200      	movs	r2, #0
 8000596:	2101      	movs	r1, #1
 8000598:	4825      	ldr	r0, [pc, #148]	@ (8000630 <display7SegLed+0x31c>)
 800059a:	f001 fb04 	bl	8001ba6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(b_GPIO_Port , b_Pin , RESET);
 800059e:	2200      	movs	r2, #0
 80005a0:	2102      	movs	r1, #2
 80005a2:	4823      	ldr	r0, [pc, #140]	@ (8000630 <display7SegLed+0x31c>)
 80005a4:	f001 faff 	bl	8001ba6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(c_GPIO_Port , c_Pin , RESET);
 80005a8:	2200      	movs	r2, #0
 80005aa:	2104      	movs	r1, #4
 80005ac:	4820      	ldr	r0, [pc, #128]	@ (8000630 <display7SegLed+0x31c>)
 80005ae:	f001 fafa 	bl	8001ba6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(d_GPIO_Port , d_Pin , RESET);
 80005b2:	2200      	movs	r2, #0
 80005b4:	2108      	movs	r1, #8
 80005b6:	481e      	ldr	r0, [pc, #120]	@ (8000630 <display7SegLed+0x31c>)
 80005b8:	f001 faf5 	bl	8001ba6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(e_GPIO_Port , e_Pin , RESET);
 80005bc:	2200      	movs	r2, #0
 80005be:	2110      	movs	r1, #16
 80005c0:	481b      	ldr	r0, [pc, #108]	@ (8000630 <display7SegLed+0x31c>)
 80005c2:	f001 faf0 	bl	8001ba6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(f_GPIO_Port , f_Pin , RESET);
 80005c6:	2200      	movs	r2, #0
 80005c8:	2120      	movs	r1, #32
 80005ca:	4819      	ldr	r0, [pc, #100]	@ (8000630 <display7SegLed+0x31c>)
 80005cc:	f001 faeb 	bl	8001ba6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(g_GPIO_Port , g_Pin , RESET);
 80005d0:	2200      	movs	r2, #0
 80005d2:	2140      	movs	r1, #64	@ 0x40
 80005d4:	4816      	ldr	r0, [pc, #88]	@ (8000630 <display7SegLed+0x31c>)
 80005d6:	f001 fae6 	bl	8001ba6 <HAL_GPIO_WritePin>
		break;
 80005da:	e024      	b.n	8000626 <display7SegLed+0x312>
	case 9:
		HAL_GPIO_WritePin(a_GPIO_Port , a_Pin , RESET);
 80005dc:	2200      	movs	r2, #0
 80005de:	2101      	movs	r1, #1
 80005e0:	4813      	ldr	r0, [pc, #76]	@ (8000630 <display7SegLed+0x31c>)
 80005e2:	f001 fae0 	bl	8001ba6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(b_GPIO_Port , b_Pin , RESET);
 80005e6:	2200      	movs	r2, #0
 80005e8:	2102      	movs	r1, #2
 80005ea:	4811      	ldr	r0, [pc, #68]	@ (8000630 <display7SegLed+0x31c>)
 80005ec:	f001 fadb 	bl	8001ba6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(c_GPIO_Port , c_Pin , RESET);
 80005f0:	2200      	movs	r2, #0
 80005f2:	2104      	movs	r1, #4
 80005f4:	480e      	ldr	r0, [pc, #56]	@ (8000630 <display7SegLed+0x31c>)
 80005f6:	f001 fad6 	bl	8001ba6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(d_GPIO_Port , d_Pin , RESET);
 80005fa:	2200      	movs	r2, #0
 80005fc:	2108      	movs	r1, #8
 80005fe:	480c      	ldr	r0, [pc, #48]	@ (8000630 <display7SegLed+0x31c>)
 8000600:	f001 fad1 	bl	8001ba6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(e_GPIO_Port , e_Pin , SET);
 8000604:	2201      	movs	r2, #1
 8000606:	2110      	movs	r1, #16
 8000608:	4809      	ldr	r0, [pc, #36]	@ (8000630 <display7SegLed+0x31c>)
 800060a:	f001 facc 	bl	8001ba6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(f_GPIO_Port , f_Pin , RESET);
 800060e:	2200      	movs	r2, #0
 8000610:	2120      	movs	r1, #32
 8000612:	4807      	ldr	r0, [pc, #28]	@ (8000630 <display7SegLed+0x31c>)
 8000614:	f001 fac7 	bl	8001ba6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(g_GPIO_Port , g_Pin , RESET);
 8000618:	2200      	movs	r2, #0
 800061a:	2140      	movs	r1, #64	@ 0x40
 800061c:	4804      	ldr	r0, [pc, #16]	@ (8000630 <display7SegLed+0x31c>)
 800061e:	f001 fac2 	bl	8001ba6 <HAL_GPIO_WritePin>
		break;
 8000622:	e000      	b.n	8000626 <display7SegLed+0x312>
	default:
		break;
 8000624:	bf00      	nop
	}
}
 8000626:	bf00      	nop
 8000628:	3708      	adds	r7, #8
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	40010c00 	.word	0x40010c00

08000634 <updateBufer>:
//
//    led_buffer[2] = led_extra_buffer[3];
//    led_buffer[3] = led_extra_buffer[4];
//}

void updateBufer(){
 8000634:	b480      	push	{r7}
 8000636:	af00      	add	r7, sp, #0
    led_buffer[0] = (time13 > 99) ? 9 : (time13 / 10);
 8000638:	4b26      	ldr	r3, [pc, #152]	@ (80006d4 <updateBufer+0xa0>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	2b63      	cmp	r3, #99	@ 0x63
 800063e:	dc08      	bgt.n	8000652 <updateBufer+0x1e>
 8000640:	4b24      	ldr	r3, [pc, #144]	@ (80006d4 <updateBufer+0xa0>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4a24      	ldr	r2, [pc, #144]	@ (80006d8 <updateBufer+0xa4>)
 8000646:	fb82 1203 	smull	r1, r2, r2, r3
 800064a:	1092      	asrs	r2, r2, #2
 800064c:	17db      	asrs	r3, r3, #31
 800064e:	1ad3      	subs	r3, r2, r3
 8000650:	e000      	b.n	8000654 <updateBufer+0x20>
 8000652:	2309      	movs	r3, #9
 8000654:	4a21      	ldr	r2, [pc, #132]	@ (80006dc <updateBufer+0xa8>)
 8000656:	6013      	str	r3, [r2, #0]
    led_buffer[1] = (time13 > 99) ? 9 : (time13 % 10);
 8000658:	4b1e      	ldr	r3, [pc, #120]	@ (80006d4 <updateBufer+0xa0>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	2b63      	cmp	r3, #99	@ 0x63
 800065e:	dc0d      	bgt.n	800067c <updateBufer+0x48>
 8000660:	4b1c      	ldr	r3, [pc, #112]	@ (80006d4 <updateBufer+0xa0>)
 8000662:	6819      	ldr	r1, [r3, #0]
 8000664:	4b1c      	ldr	r3, [pc, #112]	@ (80006d8 <updateBufer+0xa4>)
 8000666:	fb83 2301 	smull	r2, r3, r3, r1
 800066a:	109a      	asrs	r2, r3, #2
 800066c:	17cb      	asrs	r3, r1, #31
 800066e:	1ad2      	subs	r2, r2, r3
 8000670:	4613      	mov	r3, r2
 8000672:	009b      	lsls	r3, r3, #2
 8000674:	4413      	add	r3, r2
 8000676:	005b      	lsls	r3, r3, #1
 8000678:	1aca      	subs	r2, r1, r3
 800067a:	e000      	b.n	800067e <updateBufer+0x4a>
 800067c:	2209      	movs	r2, #9
 800067e:	4b17      	ldr	r3, [pc, #92]	@ (80006dc <updateBufer+0xa8>)
 8000680:	605a      	str	r2, [r3, #4]

    led_buffer[2] = (time24 > 99) ? 9 : (time24 / 10);
 8000682:	4b17      	ldr	r3, [pc, #92]	@ (80006e0 <updateBufer+0xac>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	2b63      	cmp	r3, #99	@ 0x63
 8000688:	dc08      	bgt.n	800069c <updateBufer+0x68>
 800068a:	4b15      	ldr	r3, [pc, #84]	@ (80006e0 <updateBufer+0xac>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	4a12      	ldr	r2, [pc, #72]	@ (80006d8 <updateBufer+0xa4>)
 8000690:	fb82 1203 	smull	r1, r2, r2, r3
 8000694:	1092      	asrs	r2, r2, #2
 8000696:	17db      	asrs	r3, r3, #31
 8000698:	1ad3      	subs	r3, r2, r3
 800069a:	e000      	b.n	800069e <updateBufer+0x6a>
 800069c:	2309      	movs	r3, #9
 800069e:	4a0f      	ldr	r2, [pc, #60]	@ (80006dc <updateBufer+0xa8>)
 80006a0:	6093      	str	r3, [r2, #8]
    led_buffer[3] = (time24 > 99) ? 9 : (time24 % 10);
 80006a2:	4b0f      	ldr	r3, [pc, #60]	@ (80006e0 <updateBufer+0xac>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	2b63      	cmp	r3, #99	@ 0x63
 80006a8:	dc0d      	bgt.n	80006c6 <updateBufer+0x92>
 80006aa:	4b0d      	ldr	r3, [pc, #52]	@ (80006e0 <updateBufer+0xac>)
 80006ac:	6819      	ldr	r1, [r3, #0]
 80006ae:	4b0a      	ldr	r3, [pc, #40]	@ (80006d8 <updateBufer+0xa4>)
 80006b0:	fb83 2301 	smull	r2, r3, r3, r1
 80006b4:	109a      	asrs	r2, r3, #2
 80006b6:	17cb      	asrs	r3, r1, #31
 80006b8:	1ad2      	subs	r2, r2, r3
 80006ba:	4613      	mov	r3, r2
 80006bc:	009b      	lsls	r3, r3, #2
 80006be:	4413      	add	r3, r2
 80006c0:	005b      	lsls	r3, r3, #1
 80006c2:	1aca      	subs	r2, r1, r3
 80006c4:	e000      	b.n	80006c8 <updateBufer+0x94>
 80006c6:	2209      	movs	r2, #9
 80006c8:	4b04      	ldr	r3, [pc, #16]	@ (80006dc <updateBufer+0xa8>)
 80006ca:	60da      	str	r2, [r3, #12]
}
 80006cc:	bf00      	nop
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bc80      	pop	{r7}
 80006d2:	4770      	bx	lr
 80006d4:	200000a8 	.word	0x200000a8
 80006d8:	66666667 	.word	0x66666667
 80006dc:	2000008c 	.word	0x2000008c
 80006e0:	200000ac 	.word	0x200000ac

080006e4 <update7SegLed>:




void update7SegLed(int index){
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(en1_GPIO_Port, en1_Pin, SET);
 80006ec:	2201      	movs	r2, #1
 80006ee:	2180      	movs	r1, #128	@ 0x80
 80006f0:	482b      	ldr	r0, [pc, #172]	@ (80007a0 <update7SegLed+0xbc>)
 80006f2:	f001 fa58 	bl	8001ba6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(en2_GPIO_Port, en2_Pin, SET);
 80006f6:	2201      	movs	r2, #1
 80006f8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80006fc:	4828      	ldr	r0, [pc, #160]	@ (80007a0 <update7SegLed+0xbc>)
 80006fe:	f001 fa52 	bl	8001ba6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(en3_GPIO_Port, en3_Pin, SET);
 8000702:	2201      	movs	r2, #1
 8000704:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000708:	4825      	ldr	r0, [pc, #148]	@ (80007a0 <update7SegLed+0xbc>)
 800070a:	f001 fa4c 	bl	8001ba6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(en4_GPIO_Port, en4_Pin, SET);
 800070e:	2201      	movs	r2, #1
 8000710:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000714:	4822      	ldr	r0, [pc, #136]	@ (80007a0 <update7SegLed+0xbc>)
 8000716:	f001 fa46 	bl	8001ba6 <HAL_GPIO_WritePin>

    switch(index){
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	2b03      	cmp	r3, #3
 800071e:	d83a      	bhi.n	8000796 <update7SegLed+0xb2>
 8000720:	a201      	add	r2, pc, #4	@ (adr r2, 8000728 <update7SegLed+0x44>)
 8000722:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000726:	bf00      	nop
 8000728:	08000739 	.word	0x08000739
 800072c:	0800074f 	.word	0x0800074f
 8000730:	08000767 	.word	0x08000767
 8000734:	0800077f 	.word	0x0800077f
    case 0:
    	HAL_GPIO_WritePin(en1_GPIO_Port , en1_Pin , RESET);
 8000738:	2200      	movs	r2, #0
 800073a:	2180      	movs	r1, #128	@ 0x80
 800073c:	4818      	ldr	r0, [pc, #96]	@ (80007a0 <update7SegLed+0xbc>)
 800073e:	f001 fa32 	bl	8001ba6 <HAL_GPIO_WritePin>
    	display7SegLed(led_buffer[0]);
 8000742:	4b18      	ldr	r3, [pc, #96]	@ (80007a4 <update7SegLed+0xc0>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	4618      	mov	r0, r3
 8000748:	f7ff fde4 	bl	8000314 <display7SegLed>
    	break;
 800074c:	e024      	b.n	8000798 <update7SegLed+0xb4>
    case 1:
    	HAL_GPIO_WritePin(en2_GPIO_Port , en2_Pin , RESET);
 800074e:	2200      	movs	r2, #0
 8000750:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000754:	4812      	ldr	r0, [pc, #72]	@ (80007a0 <update7SegLed+0xbc>)
 8000756:	f001 fa26 	bl	8001ba6 <HAL_GPIO_WritePin>
    	display7SegLed(led_buffer[1]);
 800075a:	4b12      	ldr	r3, [pc, #72]	@ (80007a4 <update7SegLed+0xc0>)
 800075c:	685b      	ldr	r3, [r3, #4]
 800075e:	4618      	mov	r0, r3
 8000760:	f7ff fdd8 	bl	8000314 <display7SegLed>
    	break;
 8000764:	e018      	b.n	8000798 <update7SegLed+0xb4>
    case 2:
    	HAL_GPIO_WritePin(en3_GPIO_Port , en3_Pin , RESET);
 8000766:	2200      	movs	r2, #0
 8000768:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800076c:	480c      	ldr	r0, [pc, #48]	@ (80007a0 <update7SegLed+0xbc>)
 800076e:	f001 fa1a 	bl	8001ba6 <HAL_GPIO_WritePin>
    	display7SegLed(led_buffer[2]);
 8000772:	4b0c      	ldr	r3, [pc, #48]	@ (80007a4 <update7SegLed+0xc0>)
 8000774:	689b      	ldr	r3, [r3, #8]
 8000776:	4618      	mov	r0, r3
 8000778:	f7ff fdcc 	bl	8000314 <display7SegLed>
    	break;
 800077c:	e00c      	b.n	8000798 <update7SegLed+0xb4>
    case 3:
    	HAL_GPIO_WritePin(en4_GPIO_Port , en4_Pin , RESET);
 800077e:	2200      	movs	r2, #0
 8000780:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000784:	4806      	ldr	r0, [pc, #24]	@ (80007a0 <update7SegLed+0xbc>)
 8000786:	f001 fa0e 	bl	8001ba6 <HAL_GPIO_WritePin>
    	display7SegLed(led_buffer[3]);
 800078a:	4b06      	ldr	r3, [pc, #24]	@ (80007a4 <update7SegLed+0xc0>)
 800078c:	68db      	ldr	r3, [r3, #12]
 800078e:	4618      	mov	r0, r3
 8000790:	f7ff fdc0 	bl	8000314 <display7SegLed>
    	break;
 8000794:	e000      	b.n	8000798 <update7SegLed+0xb4>
    default:
    	break;
 8000796:	bf00      	nop
    }
}
 8000798:	bf00      	nop
 800079a:	3708      	adds	r7, #8
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	40010c00 	.word	0x40010c00
 80007a4:	2000008c 	.word	0x2000008c

080007a8 <updateTimeForState>:

void updateTimeForState(int status){
 80007a8:	b480      	push	{r7}
 80007aa:	b083      	sub	sp, #12
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
	switch(status){
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	3b02      	subs	r3, #2
 80007b4:	2b03      	cmp	r3, #3
 80007b6:	d827      	bhi.n	8000808 <updateTimeForState+0x60>
 80007b8:	a201      	add	r2, pc, #4	@ (adr r2, 80007c0 <updateTimeForState+0x18>)
 80007ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007be:	bf00      	nop
 80007c0:	080007d1 	.word	0x080007d1
 80007c4:	080007e3 	.word	0x080007e3
 80007c8:	080007ed 	.word	0x080007ed
 80007cc:	080007ff 	.word	0x080007ff
	case RED13_GREEN24:
		time13 = timeRed;
 80007d0:	4b10      	ldr	r3, [pc, #64]	@ (8000814 <updateTimeForState+0x6c>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	4a10      	ldr	r2, [pc, #64]	@ (8000818 <updateTimeForState+0x70>)
 80007d6:	6013      	str	r3, [r2, #0]
		time24 = timeGreen;
 80007d8:	4b10      	ldr	r3, [pc, #64]	@ (800081c <updateTimeForState+0x74>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	4a10      	ldr	r2, [pc, #64]	@ (8000820 <updateTimeForState+0x78>)
 80007de:	6013      	str	r3, [r2, #0]
		break;
 80007e0:	e013      	b.n	800080a <updateTimeForState+0x62>
	case RED13_YELLOW24:
		time24 = timeYellow;
 80007e2:	4b10      	ldr	r3, [pc, #64]	@ (8000824 <updateTimeForState+0x7c>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	4a0e      	ldr	r2, [pc, #56]	@ (8000820 <updateTimeForState+0x78>)
 80007e8:	6013      	str	r3, [r2, #0]
		break;
 80007ea:	e00e      	b.n	800080a <updateTimeForState+0x62>
	case GREEN13_RED24:
		time13 = timeGreen;
 80007ec:	4b0b      	ldr	r3, [pc, #44]	@ (800081c <updateTimeForState+0x74>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	4a09      	ldr	r2, [pc, #36]	@ (8000818 <updateTimeForState+0x70>)
 80007f2:	6013      	str	r3, [r2, #0]
		time24 = timeRed;
 80007f4:	4b07      	ldr	r3, [pc, #28]	@ (8000814 <updateTimeForState+0x6c>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	4a09      	ldr	r2, [pc, #36]	@ (8000820 <updateTimeForState+0x78>)
 80007fa:	6013      	str	r3, [r2, #0]
		break;
 80007fc:	e005      	b.n	800080a <updateTimeForState+0x62>
	case YELLOW13_RED24:
		time13 = timeYellow;
 80007fe:	4b09      	ldr	r3, [pc, #36]	@ (8000824 <updateTimeForState+0x7c>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	4a05      	ldr	r2, [pc, #20]	@ (8000818 <updateTimeForState+0x70>)
 8000804:	6013      	str	r3, [r2, #0]
		break;
 8000806:	e000      	b.n	800080a <updateTimeForState+0x62>
	default:
		break;
 8000808:	bf00      	nop
	}
}
 800080a:	bf00      	nop
 800080c:	370c      	adds	r7, #12
 800080e:	46bd      	mov	sp, r7
 8000810:	bc80      	pop	{r7}
 8000812:	4770      	bx	lr
 8000814:	20000040 	.word	0x20000040
 8000818:	200000a8 	.word	0x200000a8
 800081c:	20000044 	.word	0x20000044
 8000820:	200000ac 	.word	0x200000ac
 8000824:	20000048 	.word	0x20000048

08000828 <turnOffAll7Seg>:

void turnOffAll7Seg(){
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(en1_GPIO_Port, en1_Pin, SET);
 800082c:	2201      	movs	r2, #1
 800082e:	2180      	movs	r1, #128	@ 0x80
 8000830:	480b      	ldr	r0, [pc, #44]	@ (8000860 <turnOffAll7Seg+0x38>)
 8000832:	f001 f9b8 	bl	8001ba6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(en2_GPIO_Port, en2_Pin, SET);
 8000836:	2201      	movs	r2, #1
 8000838:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800083c:	4808      	ldr	r0, [pc, #32]	@ (8000860 <turnOffAll7Seg+0x38>)
 800083e:	f001 f9b2 	bl	8001ba6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(en3_GPIO_Port, en3_Pin, SET);
 8000842:	2201      	movs	r2, #1
 8000844:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000848:	4805      	ldr	r0, [pc, #20]	@ (8000860 <turnOffAll7Seg+0x38>)
 800084a:	f001 f9ac 	bl	8001ba6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(en4_GPIO_Port, en4_Pin, SET);
 800084e:	2201      	movs	r2, #1
 8000850:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000854:	4802      	ldr	r0, [pc, #8]	@ (8000860 <turnOffAll7Seg+0x38>)
 8000856:	f001 f9a6 	bl	8001ba6 <HAL_GPIO_WritePin>
}
 800085a:	bf00      	nop
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	40010c00 	.word	0x40010c00

08000864 <fsm_automatic>:

#include "fsm_automatic.h"

int led_index;

void fsm_automatic(){
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
	switch(status){
 8000868:	4b9d      	ldr	r3, [pc, #628]	@ (8000ae0 <fsm_automatic+0x27c>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	3b01      	subs	r3, #1
 800086e:	2b04      	cmp	r3, #4
 8000870:	f200 824b 	bhi.w	8000d0a <fsm_automatic+0x4a6>
 8000874:	a201      	add	r2, pc, #4	@ (adr r2, 800087c <fsm_automatic+0x18>)
 8000876:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800087a:	bf00      	nop
 800087c:	08000891 	.word	0x08000891
 8000880:	080008d1 	.word	0x080008d1
 8000884:	080009e3 	.word	0x080009e3
 8000888:	08000b01 	.word	0x08000b01
 800088c:	08000c07 	.word	0x08000c07
	case INIT:
		turnOffAll7Seg();
 8000890:	f7ff ffca 	bl	8000828 <turnOffAll7Seg>
//		status = RED13_GREEN24;
		led_index = 0;
 8000894:	4b93      	ldr	r3, [pc, #588]	@ (8000ae4 <fsm_automatic+0x280>)
 8000896:	2200      	movs	r2, #0
 8000898:	601a      	str	r2, [r3, #0]
		setTimer(1 , timeGreen*1000);
 800089a:	4b93      	ldr	r3, [pc, #588]	@ (8000ae8 <fsm_automatic+0x284>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80008a2:	fb02 f303 	mul.w	r3, r2, r3
 80008a6:	4619      	mov	r1, r3
 80008a8:	2001      	movs	r0, #1
 80008aa:	f000 fd4b 	bl	8001344 <setTimer>
		setTimer(2 , 250);
 80008ae:	21fa      	movs	r1, #250	@ 0xfa
 80008b0:	2002      	movs	r0, #2
 80008b2:	f000 fd47 	bl	8001344 <setTimer>
		setTimer(3 , 1000);
 80008b6:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80008ba:	2003      	movs	r0, #3
 80008bc:	f000 fd42 	bl	8001344 <setTimer>

		updateTimeForState(status);
 80008c0:	4b87      	ldr	r3, [pc, #540]	@ (8000ae0 <fsm_automatic+0x27c>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	4618      	mov	r0, r3
 80008c6:	f7ff ff6f 	bl	80007a8 <updateTimeForState>
		updateBufer();
 80008ca:	f7ff feb3 	bl	8000634 <updateBufer>
		break;
 80008ce:	e225      	b.n	8000d1c <fsm_automatic+0x4b8>
////////////////////////////////////////////////
	case RED13_GREEN24:
		//set cho lane 13
		HAL_GPIO_WritePin(RED_13_GPIO_Port , RED_13_Pin , GPIO_PIN_RESET);
 80008d0:	2200      	movs	r2, #0
 80008d2:	2120      	movs	r1, #32
 80008d4:	4885      	ldr	r0, [pc, #532]	@ (8000aec <fsm_automatic+0x288>)
 80008d6:	f001 f966 	bl	8001ba6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW_13_GPIO_Port , YELLOW_13_Pin , GPIO_PIN_SET);
 80008da:	2201      	movs	r2, #1
 80008dc:	2140      	movs	r1, #64	@ 0x40
 80008de:	4883      	ldr	r0, [pc, #524]	@ (8000aec <fsm_automatic+0x288>)
 80008e0:	f001 f961 	bl	8001ba6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_13_GPIO_Port , GREEN_13_Pin , GPIO_PIN_SET);
 80008e4:	2201      	movs	r2, #1
 80008e6:	2180      	movs	r1, #128	@ 0x80
 80008e8:	4880      	ldr	r0, [pc, #512]	@ (8000aec <fsm_automatic+0x288>)
 80008ea:	f001 f95c 	bl	8001ba6 <HAL_GPIO_WritePin>
		//set cho lane 24
		HAL_GPIO_WritePin(RED_24_GPIO_Port , RED_24_Pin , GPIO_PIN_SET);
 80008ee:	2201      	movs	r2, #1
 80008f0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80008f4:	487d      	ldr	r0, [pc, #500]	@ (8000aec <fsm_automatic+0x288>)
 80008f6:	f001 f956 	bl	8001ba6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW_24_GPIO_Port , YELLOW_24_Pin , GPIO_PIN_SET);
 80008fa:	2201      	movs	r2, #1
 80008fc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000900:	487a      	ldr	r0, [pc, #488]	@ (8000aec <fsm_automatic+0x288>)
 8000902:	f001 f950 	bl	8001ba6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_24_GPIO_Port , GREEN_24_Pin , GPIO_PIN_RESET);
 8000906:	2200      	movs	r2, #0
 8000908:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800090c:	4877      	ldr	r0, [pc, #476]	@ (8000aec <fsm_automatic+0x288>)
 800090e:	f001 f94a 	bl	8001ba6 <HAL_GPIO_WritePin>

		if(isTimerFlagSet(1)){
 8000912:	2001      	movs	r0, #1
 8000914:	f000 fd3c 	bl	8001390 <isTimerFlagSet>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d011      	beq.n	8000942 <fsm_automatic+0xde>
			status = RED13_YELLOW24;
 800091e:	4b70      	ldr	r3, [pc, #448]	@ (8000ae0 <fsm_automatic+0x27c>)
 8000920:	2203      	movs	r2, #3
 8000922:	601a      	str	r2, [r3, #0]
			setTimer(1 , timeYellow*1000);
 8000924:	4b72      	ldr	r3, [pc, #456]	@ (8000af0 <fsm_automatic+0x28c>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800092c:	fb02 f303 	mul.w	r3, r2, r3
 8000930:	4619      	mov	r1, r3
 8000932:	2001      	movs	r0, #1
 8000934:	f000 fd06 	bl	8001344 <setTimer>
			updateTimeForState(status);
 8000938:	4b69      	ldr	r3, [pc, #420]	@ (8000ae0 <fsm_automatic+0x27c>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4618      	mov	r0, r3
 800093e:	f7ff ff33 	bl	80007a8 <updateTimeForState>
		}
		if(isTimerFlagSet(3)){
 8000942:	2003      	movs	r0, #3
 8000944:	f000 fd24 	bl	8001390 <isTimerFlagSet>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d010      	beq.n	8000970 <fsm_automatic+0x10c>
			//HAL_GPIO_WritePin(YELLOW_13_GPIO_Port , YELLOW_13_Pin , GPIO_PIN_RESET);
			time13--;
 800094e:	4b69      	ldr	r3, [pc, #420]	@ (8000af4 <fsm_automatic+0x290>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	3b01      	subs	r3, #1
 8000954:	4a67      	ldr	r2, [pc, #412]	@ (8000af4 <fsm_automatic+0x290>)
 8000956:	6013      	str	r3, [r2, #0]
			time24--;
 8000958:	4b67      	ldr	r3, [pc, #412]	@ (8000af8 <fsm_automatic+0x294>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	3b01      	subs	r3, #1
 800095e:	4a66      	ldr	r2, [pc, #408]	@ (8000af8 <fsm_automatic+0x294>)
 8000960:	6013      	str	r3, [r2, #0]
			updateBufer();
 8000962:	f7ff fe67 	bl	8000634 <updateBufer>
			setTimer(3 , 1000);
 8000966:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800096a:	2003      	movs	r0, #3
 800096c:	f000 fcea 	bl	8001344 <setTimer>
		}
		if(isTimerFlagSet(2)){
 8000970:	2002      	movs	r0, #2
 8000972:	f000 fd0d 	bl	8001390 <isTimerFlagSet>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d014      	beq.n	80009a6 <fsm_automatic+0x142>
			setTimer(2 , 250);
 800097c:	21fa      	movs	r1, #250	@ 0xfa
 800097e:	2002      	movs	r0, #2
 8000980:	f000 fce0 	bl	8001344 <setTimer>
			update7SegLed(led_index);
 8000984:	4b57      	ldr	r3, [pc, #348]	@ (8000ae4 <fsm_automatic+0x280>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4618      	mov	r0, r3
 800098a:	f7ff feab 	bl	80006e4 <update7SegLed>
			led_index++;
 800098e:	4b55      	ldr	r3, [pc, #340]	@ (8000ae4 <fsm_automatic+0x280>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	3301      	adds	r3, #1
 8000994:	4a53      	ldr	r2, [pc, #332]	@ (8000ae4 <fsm_automatic+0x280>)
 8000996:	6013      	str	r3, [r2, #0]
			if(led_index >= 4){
 8000998:	4b52      	ldr	r3, [pc, #328]	@ (8000ae4 <fsm_automatic+0x280>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	2b03      	cmp	r3, #3
 800099e:	dd02      	ble.n	80009a6 <fsm_automatic+0x142>
				led_index = 0;
 80009a0:	4b50      	ldr	r3, [pc, #320]	@ (8000ae4 <fsm_automatic+0x280>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	601a      	str	r2, [r3, #0]
			}
		}

		if(isButtonPressed(MODE_BUTTON)==1){
 80009a6:	2000      	movs	r0, #0
 80009a8:	f7ff fbd0 	bl	800014c <isButtonPressed>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b01      	cmp	r3, #1
 80009b0:	f040 81ad 	bne.w	8000d0e <fsm_automatic+0x4aa>
			status = MODIFY_RED;
 80009b4:	4b4a      	ldr	r3, [pc, #296]	@ (8000ae0 <fsm_automatic+0x27c>)
 80009b6:	220b      	movs	r2, #11
 80009b8:	601a      	str	r2, [r3, #0]
			setTimer(1 , 500);
 80009ba:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80009be:	2001      	movs	r0, #1
 80009c0:	f000 fcc0 	bl	8001344 <setTimer>
			led_index = 0;
 80009c4:	4b47      	ldr	r3, [pc, #284]	@ (8000ae4 <fsm_automatic+0x280>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	601a      	str	r2, [r3, #0]
			timer_flag[2] = 1;
 80009ca:	4b4c      	ldr	r3, [pc, #304]	@ (8000afc <fsm_automatic+0x298>)
 80009cc:	2201      	movs	r2, #1
 80009ce:	609a      	str	r2, [r3, #8]

			turnOffAll7Seg();
 80009d0:	f7ff ff2a 	bl	8000828 <turnOffAll7Seg>
			turnoff_red();
 80009d4:	f000 fb54 	bl	8001080 <turnoff_red>
			turnoff_yellow();
 80009d8:	f000 fb64 	bl	80010a4 <turnoff_yellow>
			turnoff_green();
 80009dc:	f000 fb74 	bl	80010c8 <turnoff_green>
		}
		break;
 80009e0:	e195      	b.n	8000d0e <fsm_automatic+0x4aa>
//////////////////////////////////////////////
	case RED13_YELLOW24:
		//set cho lane 13
		HAL_GPIO_WritePin(RED_13_GPIO_Port , RED_13_Pin , GPIO_PIN_RESET);
 80009e2:	2200      	movs	r2, #0
 80009e4:	2120      	movs	r1, #32
 80009e6:	4841      	ldr	r0, [pc, #260]	@ (8000aec <fsm_automatic+0x288>)
 80009e8:	f001 f8dd 	bl	8001ba6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW_13_GPIO_Port , YELLOW_13_Pin , GPIO_PIN_SET);
 80009ec:	2201      	movs	r2, #1
 80009ee:	2140      	movs	r1, #64	@ 0x40
 80009f0:	483e      	ldr	r0, [pc, #248]	@ (8000aec <fsm_automatic+0x288>)
 80009f2:	f001 f8d8 	bl	8001ba6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_13_GPIO_Port , GREEN_13_Pin , GPIO_PIN_SET);
 80009f6:	2201      	movs	r2, #1
 80009f8:	2180      	movs	r1, #128	@ 0x80
 80009fa:	483c      	ldr	r0, [pc, #240]	@ (8000aec <fsm_automatic+0x288>)
 80009fc:	f001 f8d3 	bl	8001ba6 <HAL_GPIO_WritePin>
		//set cho lane 24
		HAL_GPIO_WritePin(RED_24_GPIO_Port , RED_24_Pin , GPIO_PIN_SET);
 8000a00:	2201      	movs	r2, #1
 8000a02:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000a06:	4839      	ldr	r0, [pc, #228]	@ (8000aec <fsm_automatic+0x288>)
 8000a08:	f001 f8cd 	bl	8001ba6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW_24_GPIO_Port , YELLOW_24_Pin , GPIO_PIN_RESET);
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000a12:	4836      	ldr	r0, [pc, #216]	@ (8000aec <fsm_automatic+0x288>)
 8000a14:	f001 f8c7 	bl	8001ba6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_24_GPIO_Port , GREEN_24_Pin , GPIO_PIN_SET);
 8000a18:	2201      	movs	r2, #1
 8000a1a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a1e:	4833      	ldr	r0, [pc, #204]	@ (8000aec <fsm_automatic+0x288>)
 8000a20:	f001 f8c1 	bl	8001ba6 <HAL_GPIO_WritePin>

		if(isTimerFlagSet(1) == 1){
 8000a24:	2001      	movs	r0, #1
 8000a26:	f000 fcb3 	bl	8001390 <isTimerFlagSet>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b01      	cmp	r3, #1
 8000a2e:	d10c      	bne.n	8000a4a <fsm_automatic+0x1e6>
			status = GREEN13_RED24;
 8000a30:	4b2b      	ldr	r3, [pc, #172]	@ (8000ae0 <fsm_automatic+0x27c>)
 8000a32:	2204      	movs	r2, #4
 8000a34:	601a      	str	r2, [r3, #0]
			setTimer(1 , timeGreen*1000);
 8000a36:	4b2c      	ldr	r3, [pc, #176]	@ (8000ae8 <fsm_automatic+0x284>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000a3e:	fb02 f303 	mul.w	r3, r2, r3
 8000a42:	4619      	mov	r1, r3
 8000a44:	2001      	movs	r0, #1
 8000a46:	f000 fc7d 	bl	8001344 <setTimer>
		}
		if(isTimerFlagSet(2)){
 8000a4a:	2002      	movs	r0, #2
 8000a4c:	f000 fca0 	bl	8001390 <isTimerFlagSet>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d014      	beq.n	8000a80 <fsm_automatic+0x21c>
			update7SegLed(led_index);
 8000a56:	4b23      	ldr	r3, [pc, #140]	@ (8000ae4 <fsm_automatic+0x280>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f7ff fe42 	bl	80006e4 <update7SegLed>
			setTimer(2 , 250);
 8000a60:	21fa      	movs	r1, #250	@ 0xfa
 8000a62:	2002      	movs	r0, #2
 8000a64:	f000 fc6e 	bl	8001344 <setTimer>
			led_index++;
 8000a68:	4b1e      	ldr	r3, [pc, #120]	@ (8000ae4 <fsm_automatic+0x280>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	3301      	adds	r3, #1
 8000a6e:	4a1d      	ldr	r2, [pc, #116]	@ (8000ae4 <fsm_automatic+0x280>)
 8000a70:	6013      	str	r3, [r2, #0]
			if(led_index >= 4){
 8000a72:	4b1c      	ldr	r3, [pc, #112]	@ (8000ae4 <fsm_automatic+0x280>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	2b03      	cmp	r3, #3
 8000a78:	dd02      	ble.n	8000a80 <fsm_automatic+0x21c>
				led_index = 0;
 8000a7a:	4b1a      	ldr	r3, [pc, #104]	@ (8000ae4 <fsm_automatic+0x280>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	601a      	str	r2, [r3, #0]
			}
		}
		if(isTimerFlagSet(0)){
 8000a80:	2000      	movs	r0, #0
 8000a82:	f000 fc85 	bl	8001390 <isTimerFlagSet>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d010      	beq.n	8000aae <fsm_automatic+0x24a>
			time13--;
 8000a8c:	4b19      	ldr	r3, [pc, #100]	@ (8000af4 <fsm_automatic+0x290>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	3b01      	subs	r3, #1
 8000a92:	4a18      	ldr	r2, [pc, #96]	@ (8000af4 <fsm_automatic+0x290>)
 8000a94:	6013      	str	r3, [r2, #0]
			time24--;
 8000a96:	4b18      	ldr	r3, [pc, #96]	@ (8000af8 <fsm_automatic+0x294>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	3b01      	subs	r3, #1
 8000a9c:	4a16      	ldr	r2, [pc, #88]	@ (8000af8 <fsm_automatic+0x294>)
 8000a9e:	6013      	str	r3, [r2, #0]
			updateBufer();
 8000aa0:	f7ff fdc8 	bl	8000634 <updateBufer>
			setTimer(0 , 1000);
 8000aa4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000aa8:	2000      	movs	r0, #0
 8000aaa:	f000 fc4b 	bl	8001344 <setTimer>
		}
		if(isButtonPressed(MODE_BUTTON)==1){
 8000aae:	2000      	movs	r0, #0
 8000ab0:	f7ff fb4c 	bl	800014c <isButtonPressed>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b01      	cmp	r3, #1
 8000ab8:	f040 812b 	bne.w	8000d12 <fsm_automatic+0x4ae>
			status = MODIFY_RED;
 8000abc:	4b08      	ldr	r3, [pc, #32]	@ (8000ae0 <fsm_automatic+0x27c>)
 8000abe:	220b      	movs	r2, #11
 8000ac0:	601a      	str	r2, [r3, #0]
			setTimer(1 , 500);
 8000ac2:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8000ac6:	2001      	movs	r0, #1
 8000ac8:	f000 fc3c 	bl	8001344 <setTimer>

			turnOffAll7Seg();
 8000acc:	f7ff feac 	bl	8000828 <turnOffAll7Seg>
			turnoff_red();
 8000ad0:	f000 fad6 	bl	8001080 <turnoff_red>
			turnoff_yellow();
 8000ad4:	f000 fae6 	bl	80010a4 <turnoff_yellow>
			turnoff_green();
 8000ad8:	f000 faf6 	bl	80010c8 <turnoff_green>
		}
		break;
 8000adc:	e119      	b.n	8000d12 <fsm_automatic+0x4ae>
 8000ade:	bf00      	nop
 8000ae0:	200000a4 	.word	0x200000a4
 8000ae4:	2000009c 	.word	0x2000009c
 8000ae8:	20000044 	.word	0x20000044
 8000aec:	40010800 	.word	0x40010800
 8000af0:	20000048 	.word	0x20000048
 8000af4:	200000a8 	.word	0x200000a8
 8000af8:	200000ac 	.word	0x200000ac
 8000afc:	2000010c 	.word	0x2000010c
/////////////////////////////////////////////////
	case GREEN13_RED24:
		updateTimeForState(status);
 8000b00:	4b87      	ldr	r3, [pc, #540]	@ (8000d20 <fsm_automatic+0x4bc>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4618      	mov	r0, r3
 8000b06:	f7ff fe4f 	bl	80007a8 <updateTimeForState>
		//set cho lane 13
		HAL_GPIO_WritePin(RED_13_GPIO_Port , RED_13_Pin , GPIO_PIN_SET);
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	2120      	movs	r1, #32
 8000b0e:	4885      	ldr	r0, [pc, #532]	@ (8000d24 <fsm_automatic+0x4c0>)
 8000b10:	f001 f849 	bl	8001ba6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW_13_GPIO_Port , YELLOW_13_Pin , GPIO_PIN_SET);
 8000b14:	2201      	movs	r2, #1
 8000b16:	2140      	movs	r1, #64	@ 0x40
 8000b18:	4882      	ldr	r0, [pc, #520]	@ (8000d24 <fsm_automatic+0x4c0>)
 8000b1a:	f001 f844 	bl	8001ba6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_13_GPIO_Port , GREEN_13_Pin , GPIO_PIN_RESET);
 8000b1e:	2200      	movs	r2, #0
 8000b20:	2180      	movs	r1, #128	@ 0x80
 8000b22:	4880      	ldr	r0, [pc, #512]	@ (8000d24 <fsm_automatic+0x4c0>)
 8000b24:	f001 f83f 	bl	8001ba6 <HAL_GPIO_WritePin>
		//set cho lane 24
		HAL_GPIO_WritePin(RED_24_GPIO_Port , RED_24_Pin , GPIO_PIN_RESET);
 8000b28:	2200      	movs	r2, #0
 8000b2a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000b2e:	487d      	ldr	r0, [pc, #500]	@ (8000d24 <fsm_automatic+0x4c0>)
 8000b30:	f001 f839 	bl	8001ba6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW_24_GPIO_Port , YELLOW_24_Pin , GPIO_PIN_SET);
 8000b34:	2201      	movs	r2, #1
 8000b36:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b3a:	487a      	ldr	r0, [pc, #488]	@ (8000d24 <fsm_automatic+0x4c0>)
 8000b3c:	f001 f833 	bl	8001ba6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_24_GPIO_Port , GREEN_24_Pin , GPIO_PIN_SET);
 8000b40:	2201      	movs	r2, #1
 8000b42:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000b46:	4877      	ldr	r0, [pc, #476]	@ (8000d24 <fsm_automatic+0x4c0>)
 8000b48:	f001 f82d 	bl	8001ba6 <HAL_GPIO_WritePin>

		if(isTimerFlagSet(1) == 1){
 8000b4c:	2001      	movs	r0, #1
 8000b4e:	f000 fc1f 	bl	8001390 <isTimerFlagSet>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b01      	cmp	r3, #1
 8000b56:	d10c      	bne.n	8000b72 <fsm_automatic+0x30e>
			status = YELLOW13_RED24;
 8000b58:	4b71      	ldr	r3, [pc, #452]	@ (8000d20 <fsm_automatic+0x4bc>)
 8000b5a:	2205      	movs	r2, #5
 8000b5c:	601a      	str	r2, [r3, #0]
			setTimer(1 , timeYellow*1000);
 8000b5e:	4b72      	ldr	r3, [pc, #456]	@ (8000d28 <fsm_automatic+0x4c4>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000b66:	fb02 f303 	mul.w	r3, r2, r3
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	2001      	movs	r0, #1
 8000b6e:	f000 fbe9 	bl	8001344 <setTimer>
		}
		if(isTimerFlagSet(2)){
 8000b72:	2002      	movs	r0, #2
 8000b74:	f000 fc0c 	bl	8001390 <isTimerFlagSet>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d014      	beq.n	8000ba8 <fsm_automatic+0x344>
			update7SegLed(led_index);
 8000b7e:	4b6b      	ldr	r3, [pc, #428]	@ (8000d2c <fsm_automatic+0x4c8>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	4618      	mov	r0, r3
 8000b84:	f7ff fdae 	bl	80006e4 <update7SegLed>
			setTimer(2 , 250);
 8000b88:	21fa      	movs	r1, #250	@ 0xfa
 8000b8a:	2002      	movs	r0, #2
 8000b8c:	f000 fbda 	bl	8001344 <setTimer>
			led_index++;
 8000b90:	4b66      	ldr	r3, [pc, #408]	@ (8000d2c <fsm_automatic+0x4c8>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	3301      	adds	r3, #1
 8000b96:	4a65      	ldr	r2, [pc, #404]	@ (8000d2c <fsm_automatic+0x4c8>)
 8000b98:	6013      	str	r3, [r2, #0]
			if(led_index >= 4){
 8000b9a:	4b64      	ldr	r3, [pc, #400]	@ (8000d2c <fsm_automatic+0x4c8>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	2b03      	cmp	r3, #3
 8000ba0:	dd02      	ble.n	8000ba8 <fsm_automatic+0x344>
				led_index = 0;
 8000ba2:	4b62      	ldr	r3, [pc, #392]	@ (8000d2c <fsm_automatic+0x4c8>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	601a      	str	r2, [r3, #0]
			}
		}
		if(isTimerFlagSet(0)){
 8000ba8:	2000      	movs	r0, #0
 8000baa:	f000 fbf1 	bl	8001390 <isTimerFlagSet>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d010      	beq.n	8000bd6 <fsm_automatic+0x372>
			time13--;
 8000bb4:	4b5e      	ldr	r3, [pc, #376]	@ (8000d30 <fsm_automatic+0x4cc>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	3b01      	subs	r3, #1
 8000bba:	4a5d      	ldr	r2, [pc, #372]	@ (8000d30 <fsm_automatic+0x4cc>)
 8000bbc:	6013      	str	r3, [r2, #0]
			time24--;
 8000bbe:	4b5d      	ldr	r3, [pc, #372]	@ (8000d34 <fsm_automatic+0x4d0>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	3b01      	subs	r3, #1
 8000bc4:	4a5b      	ldr	r2, [pc, #364]	@ (8000d34 <fsm_automatic+0x4d0>)
 8000bc6:	6013      	str	r3, [r2, #0]
			updateBufer();
 8000bc8:	f7ff fd34 	bl	8000634 <updateBufer>
			setTimer(0 , 1000);
 8000bcc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000bd0:	2000      	movs	r0, #0
 8000bd2:	f000 fbb7 	bl	8001344 <setTimer>
		}
		if(isButtonPressed(MODE_BUTTON)==1){
 8000bd6:	2000      	movs	r0, #0
 8000bd8:	f7ff fab8 	bl	800014c <isButtonPressed>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b01      	cmp	r3, #1
 8000be0:	f040 8099 	bne.w	8000d16 <fsm_automatic+0x4b2>
			status = MODIFY_RED;
 8000be4:	4b4e      	ldr	r3, [pc, #312]	@ (8000d20 <fsm_automatic+0x4bc>)
 8000be6:	220b      	movs	r2, #11
 8000be8:	601a      	str	r2, [r3, #0]
			setTimer(1 , 500);
 8000bea:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8000bee:	2001      	movs	r0, #1
 8000bf0:	f000 fba8 	bl	8001344 <setTimer>
			turnOffAll7Seg();
 8000bf4:	f7ff fe18 	bl	8000828 <turnOffAll7Seg>
			turnoff_red();
 8000bf8:	f000 fa42 	bl	8001080 <turnoff_red>
			turnoff_yellow();
 8000bfc:	f000 fa52 	bl	80010a4 <turnoff_yellow>
			turnoff_green();
 8000c00:	f000 fa62 	bl	80010c8 <turnoff_green>
		}
		break;
 8000c04:	e087      	b.n	8000d16 <fsm_automatic+0x4b2>
///////////////////////////////////////////////////
	case YELLOW13_RED24:
		updateTimeForState(status);
 8000c06:	4b46      	ldr	r3, [pc, #280]	@ (8000d20 <fsm_automatic+0x4bc>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f7ff fdcc 	bl	80007a8 <updateTimeForState>
		//set cho lane 13
		HAL_GPIO_WritePin(RED_13_GPIO_Port , RED_13_Pin , GPIO_PIN_SET);
 8000c10:	2201      	movs	r2, #1
 8000c12:	2120      	movs	r1, #32
 8000c14:	4843      	ldr	r0, [pc, #268]	@ (8000d24 <fsm_automatic+0x4c0>)
 8000c16:	f000 ffc6 	bl	8001ba6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW_13_GPIO_Port , YELLOW_13_Pin , GPIO_PIN_RESET);
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	2140      	movs	r1, #64	@ 0x40
 8000c1e:	4841      	ldr	r0, [pc, #260]	@ (8000d24 <fsm_automatic+0x4c0>)
 8000c20:	f000 ffc1 	bl	8001ba6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_13_GPIO_Port , GREEN_13_Pin , GPIO_PIN_SET);
 8000c24:	2201      	movs	r2, #1
 8000c26:	2180      	movs	r1, #128	@ 0x80
 8000c28:	483e      	ldr	r0, [pc, #248]	@ (8000d24 <fsm_automatic+0x4c0>)
 8000c2a:	f000 ffbc 	bl	8001ba6 <HAL_GPIO_WritePin>
		//set cho lane 24
		HAL_GPIO_WritePin(RED_24_GPIO_Port , RED_24_Pin , GPIO_PIN_RESET);
 8000c2e:	2200      	movs	r2, #0
 8000c30:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c34:	483b      	ldr	r0, [pc, #236]	@ (8000d24 <fsm_automatic+0x4c0>)
 8000c36:	f000 ffb6 	bl	8001ba6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW_24_GPIO_Port , YELLOW_24_Pin , GPIO_PIN_SET);
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c40:	4838      	ldr	r0, [pc, #224]	@ (8000d24 <fsm_automatic+0x4c0>)
 8000c42:	f000 ffb0 	bl	8001ba6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_24_GPIO_Port , GREEN_24_Pin , GPIO_PIN_SET);
 8000c46:	2201      	movs	r2, #1
 8000c48:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000c4c:	4835      	ldr	r0, [pc, #212]	@ (8000d24 <fsm_automatic+0x4c0>)
 8000c4e:	f000 ffaa 	bl	8001ba6 <HAL_GPIO_WritePin>

		if(isTimerFlagSet(1) == 1){
 8000c52:	2001      	movs	r0, #1
 8000c54:	f000 fb9c 	bl	8001390 <isTimerFlagSet>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b01      	cmp	r3, #1
 8000c5c:	d10c      	bne.n	8000c78 <fsm_automatic+0x414>
			status = RED13_GREEN24;
 8000c5e:	4b30      	ldr	r3, [pc, #192]	@ (8000d20 <fsm_automatic+0x4bc>)
 8000c60:	2202      	movs	r2, #2
 8000c62:	601a      	str	r2, [r3, #0]
			setTimer(1 , timeGreen*1000);
 8000c64:	4b34      	ldr	r3, [pc, #208]	@ (8000d38 <fsm_automatic+0x4d4>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000c6c:	fb02 f303 	mul.w	r3, r2, r3
 8000c70:	4619      	mov	r1, r3
 8000c72:	2001      	movs	r0, #1
 8000c74:	f000 fb66 	bl	8001344 <setTimer>
		}
		if(isTimerFlagSet(2)){
 8000c78:	2002      	movs	r0, #2
 8000c7a:	f000 fb89 	bl	8001390 <isTimerFlagSet>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d014      	beq.n	8000cae <fsm_automatic+0x44a>
			update7SegLed(led_index);
 8000c84:	4b29      	ldr	r3, [pc, #164]	@ (8000d2c <fsm_automatic+0x4c8>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f7ff fd2b 	bl	80006e4 <update7SegLed>
			setTimer(2 , 250);
 8000c8e:	21fa      	movs	r1, #250	@ 0xfa
 8000c90:	2002      	movs	r0, #2
 8000c92:	f000 fb57 	bl	8001344 <setTimer>
			led_index++;
 8000c96:	4b25      	ldr	r3, [pc, #148]	@ (8000d2c <fsm_automatic+0x4c8>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	3301      	adds	r3, #1
 8000c9c:	4a23      	ldr	r2, [pc, #140]	@ (8000d2c <fsm_automatic+0x4c8>)
 8000c9e:	6013      	str	r3, [r2, #0]
			if(led_index >= 4){
 8000ca0:	4b22      	ldr	r3, [pc, #136]	@ (8000d2c <fsm_automatic+0x4c8>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	2b03      	cmp	r3, #3
 8000ca6:	dd02      	ble.n	8000cae <fsm_automatic+0x44a>
				led_index = 0;
 8000ca8:	4b20      	ldr	r3, [pc, #128]	@ (8000d2c <fsm_automatic+0x4c8>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	601a      	str	r2, [r3, #0]
			}
		}
		if(isTimerFlagSet(0)){
 8000cae:	2000      	movs	r0, #0
 8000cb0:	f000 fb6e 	bl	8001390 <isTimerFlagSet>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d010      	beq.n	8000cdc <fsm_automatic+0x478>
			time13--;
 8000cba:	4b1d      	ldr	r3, [pc, #116]	@ (8000d30 <fsm_automatic+0x4cc>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	3b01      	subs	r3, #1
 8000cc0:	4a1b      	ldr	r2, [pc, #108]	@ (8000d30 <fsm_automatic+0x4cc>)
 8000cc2:	6013      	str	r3, [r2, #0]
			time24--;
 8000cc4:	4b1b      	ldr	r3, [pc, #108]	@ (8000d34 <fsm_automatic+0x4d0>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	3b01      	subs	r3, #1
 8000cca:	4a1a      	ldr	r2, [pc, #104]	@ (8000d34 <fsm_automatic+0x4d0>)
 8000ccc:	6013      	str	r3, [r2, #0]
			updateBufer();
 8000cce:	f7ff fcb1 	bl	8000634 <updateBufer>
			setTimer(0 , 1000);
 8000cd2:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000cd6:	2000      	movs	r0, #0
 8000cd8:	f000 fb34 	bl	8001344 <setTimer>
		}
		if(isButtonPressed(MODE_BUTTON)==1){
 8000cdc:	2000      	movs	r0, #0
 8000cde:	f7ff fa35 	bl	800014c <isButtonPressed>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b01      	cmp	r3, #1
 8000ce6:	d118      	bne.n	8000d1a <fsm_automatic+0x4b6>
			status = MODIFY_RED;
 8000ce8:	4b0d      	ldr	r3, [pc, #52]	@ (8000d20 <fsm_automatic+0x4bc>)
 8000cea:	220b      	movs	r2, #11
 8000cec:	601a      	str	r2, [r3, #0]
			setTimer(1 , 500);
 8000cee:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	f000 fb26 	bl	8001344 <setTimer>
			turnOffAll7Seg();
 8000cf8:	f7ff fd96 	bl	8000828 <turnOffAll7Seg>
			turnoff_red();
 8000cfc:	f000 f9c0 	bl	8001080 <turnoff_red>
			turnoff_yellow();
 8000d00:	f000 f9d0 	bl	80010a4 <turnoff_yellow>
			turnoff_green();
 8000d04:	f000 f9e0 	bl	80010c8 <turnoff_green>
		}
		break;
 8000d08:	e007      	b.n	8000d1a <fsm_automatic+0x4b6>
	default:
		break;
 8000d0a:	bf00      	nop
 8000d0c:	e006      	b.n	8000d1c <fsm_automatic+0x4b8>
		break;
 8000d0e:	bf00      	nop
 8000d10:	e004      	b.n	8000d1c <fsm_automatic+0x4b8>
		break;
 8000d12:	bf00      	nop
 8000d14:	e002      	b.n	8000d1c <fsm_automatic+0x4b8>
		break;
 8000d16:	bf00      	nop
 8000d18:	e000      	b.n	8000d1c <fsm_automatic+0x4b8>
		break;
 8000d1a:	bf00      	nop
	}
}
 8000d1c:	bf00      	nop
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	200000a4 	.word	0x200000a4
 8000d24:	40010800 	.word	0x40010800
 8000d28:	20000048 	.word	0x20000048
 8000d2c:	2000009c 	.word	0x2000009c
 8000d30:	200000a8 	.word	0x200000a8
 8000d34:	200000ac 	.word	0x200000ac
 8000d38:	20000044 	.word	0x20000044

08000d3c <fsm_manual>:
#include "fsm_manual.h"
#include "fsm_automatic.h"

int index = 0;
int temp_time = 1;
void fsm_manual(){
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
	switch(status){
 8000d40:	4b80      	ldr	r3, [pc, #512]	@ (8000f44 <fsm_manual+0x208>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	2b0d      	cmp	r3, #13
 8000d46:	f000 810d 	beq.w	8000f64 <fsm_manual+0x228>
 8000d4a:	2b0d      	cmp	r3, #13
 8000d4c:	f300 817e 	bgt.w	800104c <fsm_manual+0x310>
 8000d50:	2b0b      	cmp	r3, #11
 8000d52:	d002      	beq.n	8000d5a <fsm_manual+0x1e>
 8000d54:	2b0c      	cmp	r3, #12
 8000d56:	d07a      	beq.n	8000e4e <fsm_manual+0x112>
			turnoff_green();
			status = INIT;
		}
		break;
	default:
		break;
 8000d58:	e178      	b.n	800104c <fsm_manual+0x310>
		time13 = temp_time;
 8000d5a:	4b7b      	ldr	r3, [pc, #492]	@ (8000f48 <fsm_manual+0x20c>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	4a7b      	ldr	r2, [pc, #492]	@ (8000f4c <fsm_manual+0x210>)
 8000d60:	6013      	str	r3, [r2, #0]
		time24 = 2;
 8000d62:	4b7b      	ldr	r3, [pc, #492]	@ (8000f50 <fsm_manual+0x214>)
 8000d64:	2202      	movs	r2, #2
 8000d66:	601a      	str	r2, [r3, #0]
		if(isTimerFlagSet(1)==1){
 8000d68:	2001      	movs	r0, #1
 8000d6a:	f000 fb11 	bl	8001390 <isTimerFlagSet>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b01      	cmp	r3, #1
 8000d72:	d10d      	bne.n	8000d90 <fsm_manual+0x54>
			HAL_GPIO_TogglePin(RED_13_GPIO_Port , RED_13_Pin);
 8000d74:	2120      	movs	r1, #32
 8000d76:	4877      	ldr	r0, [pc, #476]	@ (8000f54 <fsm_manual+0x218>)
 8000d78:	f000 ff2d 	bl	8001bd6 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(RED_24_GPIO_Port , RED_24_Pin);
 8000d7c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d80:	4874      	ldr	r0, [pc, #464]	@ (8000f54 <fsm_manual+0x218>)
 8000d82:	f000 ff28 	bl	8001bd6 <HAL_GPIO_TogglePin>
			setTimer(1 , 500);
 8000d86:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8000d8a:	2001      	movs	r0, #1
 8000d8c:	f000 fada 	bl	8001344 <setTimer>
		if(isTimerFlagSet(2)){
 8000d90:	2002      	movs	r0, #2
 8000d92:	f000 fafd 	bl	8001390 <isTimerFlagSet>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d016      	beq.n	8000dca <fsm_manual+0x8e>
			setTimer(2 , 250);
 8000d9c:	21fa      	movs	r1, #250	@ 0xfa
 8000d9e:	2002      	movs	r0, #2
 8000da0:	f000 fad0 	bl	8001344 <setTimer>
			updateBufer();
 8000da4:	f7ff fc46 	bl	8000634 <updateBufer>
			update7SegLed(index);
 8000da8:	4b6b      	ldr	r3, [pc, #428]	@ (8000f58 <fsm_manual+0x21c>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4618      	mov	r0, r3
 8000dae:	f7ff fc99 	bl	80006e4 <update7SegLed>
			index++;
 8000db2:	4b69      	ldr	r3, [pc, #420]	@ (8000f58 <fsm_manual+0x21c>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	3301      	adds	r3, #1
 8000db8:	4a67      	ldr	r2, [pc, #412]	@ (8000f58 <fsm_manual+0x21c>)
 8000dba:	6013      	str	r3, [r2, #0]
			if(index >= 4){
 8000dbc:	4b66      	ldr	r3, [pc, #408]	@ (8000f58 <fsm_manual+0x21c>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	2b03      	cmp	r3, #3
 8000dc2:	dd02      	ble.n	8000dca <fsm_manual+0x8e>
				index = 0;
 8000dc4:	4b64      	ldr	r3, [pc, #400]	@ (8000f58 <fsm_manual+0x21c>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	601a      	str	r2, [r3, #0]
		if(isButtonPressed(MODIFY_BUTTON)){   // nhan tha --> +1
 8000dca:	2001      	movs	r0, #1
 8000dcc:	f7ff f9be 	bl	800014c <isButtonPressed>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d004      	beq.n	8000de0 <fsm_manual+0xa4>
			temp_time++;
 8000dd6:	4b5c      	ldr	r3, [pc, #368]	@ (8000f48 <fsm_manual+0x20c>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	3301      	adds	r3, #1
 8000ddc:	4a5a      	ldr	r2, [pc, #360]	@ (8000f48 <fsm_manual+0x20c>)
 8000dde:	6013      	str	r3, [r2, #0]
		if(isButtonLongPressed(MODIFY_BUTTON)){ // nhan de --> +5
 8000de0:	2001      	movs	r0, #1
 8000de2:	f7ff f9cd 	bl	8000180 <isButtonLongPressed>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d004      	beq.n	8000df6 <fsm_manual+0xba>
			temp_time += 5;
 8000dec:	4b56      	ldr	r3, [pc, #344]	@ (8000f48 <fsm_manual+0x20c>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	3305      	adds	r3, #5
 8000df2:	4a55      	ldr	r2, [pc, #340]	@ (8000f48 <fsm_manual+0x20c>)
 8000df4:	6013      	str	r3, [r2, #0]
		if(isButtonPressed(SET_BUTTON)){
 8000df6:	2002      	movs	r0, #2
 8000df8:	f7ff f9a8 	bl	800014c <isButtonPressed>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d010      	beq.n	8000e24 <fsm_manual+0xe8>
			turnoff_red();
 8000e02:	f000 f93d 	bl	8001080 <turnoff_red>
			status = MODIFY_YELLOW;
 8000e06:	4b4f      	ldr	r3, [pc, #316]	@ (8000f44 <fsm_manual+0x208>)
 8000e08:	220c      	movs	r2, #12
 8000e0a:	601a      	str	r2, [r3, #0]
			setTimer(1 , 500);
 8000e0c:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8000e10:	2001      	movs	r0, #1
 8000e12:	f000 fa97 	bl	8001344 <setTimer>
			timeRed = temp_time;
 8000e16:	4b4c      	ldr	r3, [pc, #304]	@ (8000f48 <fsm_manual+0x20c>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	4a50      	ldr	r2, [pc, #320]	@ (8000f5c <fsm_manual+0x220>)
 8000e1c:	6013      	str	r3, [r2, #0]
			temp_time = 1;
 8000e1e:	4b4a      	ldr	r3, [pc, #296]	@ (8000f48 <fsm_manual+0x20c>)
 8000e20:	2201      	movs	r2, #1
 8000e22:	601a      	str	r2, [r3, #0]
		if(isButtonPressed(MODE_BUTTON)){
 8000e24:	2000      	movs	r0, #0
 8000e26:	f7ff f991 	bl	800014c <isButtonPressed>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	f000 810f 	beq.w	8001050 <fsm_manual+0x314>
			turnoff_red();
 8000e32:	f000 f925 	bl	8001080 <turnoff_red>
			status = MODIFY_YELLOW;
 8000e36:	4b43      	ldr	r3, [pc, #268]	@ (8000f44 <fsm_manual+0x208>)
 8000e38:	220c      	movs	r2, #12
 8000e3a:	601a      	str	r2, [r3, #0]
			setTimer(1 , 500);
 8000e3c:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8000e40:	2001      	movs	r0, #1
 8000e42:	f000 fa7f 	bl	8001344 <setTimer>
			temp_time = 1;
 8000e46:	4b40      	ldr	r3, [pc, #256]	@ (8000f48 <fsm_manual+0x20c>)
 8000e48:	2201      	movs	r2, #1
 8000e4a:	601a      	str	r2, [r3, #0]
		break;
 8000e4c:	e100      	b.n	8001050 <fsm_manual+0x314>
		time13 = temp_time;
 8000e4e:	4b3e      	ldr	r3, [pc, #248]	@ (8000f48 <fsm_manual+0x20c>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	4a3e      	ldr	r2, [pc, #248]	@ (8000f4c <fsm_manual+0x210>)
 8000e54:	6013      	str	r3, [r2, #0]
		time24 = 3;
 8000e56:	4b3e      	ldr	r3, [pc, #248]	@ (8000f50 <fsm_manual+0x214>)
 8000e58:	2203      	movs	r2, #3
 8000e5a:	601a      	str	r2, [r3, #0]
		if(isTimerFlagSet(1)==1){
 8000e5c:	2001      	movs	r0, #1
 8000e5e:	f000 fa97 	bl	8001390 <isTimerFlagSet>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b01      	cmp	r3, #1
 8000e66:	d10d      	bne.n	8000e84 <fsm_manual+0x148>
			HAL_GPIO_TogglePin(YELLOW_13_GPIO_Port , YELLOW_13_Pin);
 8000e68:	2140      	movs	r1, #64	@ 0x40
 8000e6a:	483a      	ldr	r0, [pc, #232]	@ (8000f54 <fsm_manual+0x218>)
 8000e6c:	f000 feb3 	bl	8001bd6 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(YELLOW_24_GPIO_Port , YELLOW_24_Pin);
 8000e70:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e74:	4837      	ldr	r0, [pc, #220]	@ (8000f54 <fsm_manual+0x218>)
 8000e76:	f000 feae 	bl	8001bd6 <HAL_GPIO_TogglePin>
			setTimer(1 , 500);
 8000e7a:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8000e7e:	2001      	movs	r0, #1
 8000e80:	f000 fa60 	bl	8001344 <setTimer>
		if(isTimerFlagSet(2)){
 8000e84:	2002      	movs	r0, #2
 8000e86:	f000 fa83 	bl	8001390 <isTimerFlagSet>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d016      	beq.n	8000ebe <fsm_manual+0x182>
			setTimer(2 , 250);
 8000e90:	21fa      	movs	r1, #250	@ 0xfa
 8000e92:	2002      	movs	r0, #2
 8000e94:	f000 fa56 	bl	8001344 <setTimer>
			updateBufer();
 8000e98:	f7ff fbcc 	bl	8000634 <updateBufer>
			update7SegLed(index);
 8000e9c:	4b2e      	ldr	r3, [pc, #184]	@ (8000f58 <fsm_manual+0x21c>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f7ff fc1f 	bl	80006e4 <update7SegLed>
			index++;
 8000ea6:	4b2c      	ldr	r3, [pc, #176]	@ (8000f58 <fsm_manual+0x21c>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	3301      	adds	r3, #1
 8000eac:	4a2a      	ldr	r2, [pc, #168]	@ (8000f58 <fsm_manual+0x21c>)
 8000eae:	6013      	str	r3, [r2, #0]
			if(index >= 4){
 8000eb0:	4b29      	ldr	r3, [pc, #164]	@ (8000f58 <fsm_manual+0x21c>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	2b03      	cmp	r3, #3
 8000eb6:	dd02      	ble.n	8000ebe <fsm_manual+0x182>
				index = 0;
 8000eb8:	4b27      	ldr	r3, [pc, #156]	@ (8000f58 <fsm_manual+0x21c>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	601a      	str	r2, [r3, #0]
		if(isButtonPressed(MODIFY_BUTTON)){   // nhan tha --> +1
 8000ebe:	2001      	movs	r0, #1
 8000ec0:	f7ff f944 	bl	800014c <isButtonPressed>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d004      	beq.n	8000ed4 <fsm_manual+0x198>
			temp_time++;
 8000eca:	4b1f      	ldr	r3, [pc, #124]	@ (8000f48 <fsm_manual+0x20c>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	3301      	adds	r3, #1
 8000ed0:	4a1d      	ldr	r2, [pc, #116]	@ (8000f48 <fsm_manual+0x20c>)
 8000ed2:	6013      	str	r3, [r2, #0]
		if(isButtonLongPressed(MODIFY_BUTTON)){ // nhan de --> +5
 8000ed4:	2001      	movs	r0, #1
 8000ed6:	f7ff f953 	bl	8000180 <isButtonLongPressed>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d004      	beq.n	8000eea <fsm_manual+0x1ae>
			temp_time += 5;
 8000ee0:	4b19      	ldr	r3, [pc, #100]	@ (8000f48 <fsm_manual+0x20c>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	3305      	adds	r3, #5
 8000ee6:	4a18      	ldr	r2, [pc, #96]	@ (8000f48 <fsm_manual+0x20c>)
 8000ee8:	6013      	str	r3, [r2, #0]
		if(isButtonPressed(SET_BUTTON)){
 8000eea:	2002      	movs	r0, #2
 8000eec:	f7ff f92e 	bl	800014c <isButtonPressed>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d013      	beq.n	8000f1e <fsm_manual+0x1e2>
			turnoff_yellow();
 8000ef6:	f000 f8d5 	bl	80010a4 <turnoff_yellow>
			status = MODIFY_GREEN;
 8000efa:	4b12      	ldr	r3, [pc, #72]	@ (8000f44 <fsm_manual+0x208>)
 8000efc:	220d      	movs	r2, #13
 8000efe:	601a      	str	r2, [r3, #0]
			setTimer(1 , 500);
 8000f00:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8000f04:	2001      	movs	r0, #1
 8000f06:	f000 fa1d 	bl	8001344 <setTimer>
			timeYellow = temp_time;
 8000f0a:	4b0f      	ldr	r3, [pc, #60]	@ (8000f48 <fsm_manual+0x20c>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	4a14      	ldr	r2, [pc, #80]	@ (8000f60 <fsm_manual+0x224>)
 8000f10:	6013      	str	r3, [r2, #0]
			temp_time = 1;
 8000f12:	4b0d      	ldr	r3, [pc, #52]	@ (8000f48 <fsm_manual+0x20c>)
 8000f14:	2201      	movs	r2, #1
 8000f16:	601a      	str	r2, [r3, #0]
			time13 = 1;
 8000f18:	4b0c      	ldr	r3, [pc, #48]	@ (8000f4c <fsm_manual+0x210>)
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	601a      	str	r2, [r3, #0]
		if(isButtonPressed(MODE_BUTTON)==1){
 8000f1e:	2000      	movs	r0, #0
 8000f20:	f7ff f914 	bl	800014c <isButtonPressed>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b01      	cmp	r3, #1
 8000f28:	f040 8094 	bne.w	8001054 <fsm_manual+0x318>
			turnoff_yellow();
 8000f2c:	f000 f8ba 	bl	80010a4 <turnoff_yellow>
			status = MODIFY_GREEN;
 8000f30:	4b04      	ldr	r3, [pc, #16]	@ (8000f44 <fsm_manual+0x208>)
 8000f32:	220d      	movs	r2, #13
 8000f34:	601a      	str	r2, [r3, #0]
			setTimer(1 , 500);
 8000f36:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8000f3a:	2001      	movs	r0, #1
 8000f3c:	f000 fa02 	bl	8001344 <setTimer>
		break;
 8000f40:	e088      	b.n	8001054 <fsm_manual+0x318>
 8000f42:	bf00      	nop
 8000f44:	200000a4 	.word	0x200000a4
 8000f48:	2000003c 	.word	0x2000003c
 8000f4c:	200000a8 	.word	0x200000a8
 8000f50:	200000ac 	.word	0x200000ac
 8000f54:	40010800 	.word	0x40010800
 8000f58:	200000a0 	.word	0x200000a0
 8000f5c:	20000040 	.word	0x20000040
 8000f60:	20000048 	.word	0x20000048
		time13 = temp_time;
 8000f64:	4b3e      	ldr	r3, [pc, #248]	@ (8001060 <fsm_manual+0x324>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a3e      	ldr	r2, [pc, #248]	@ (8001064 <fsm_manual+0x328>)
 8000f6a:	6013      	str	r3, [r2, #0]
		time24 = 4;
 8000f6c:	4b3e      	ldr	r3, [pc, #248]	@ (8001068 <fsm_manual+0x32c>)
 8000f6e:	2204      	movs	r2, #4
 8000f70:	601a      	str	r2, [r3, #0]
		if(isTimerFlagSet(1)==1){
 8000f72:	2001      	movs	r0, #1
 8000f74:	f000 fa0c 	bl	8001390 <isTimerFlagSet>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b01      	cmp	r3, #1
 8000f7c:	d10d      	bne.n	8000f9a <fsm_manual+0x25e>
			HAL_GPIO_TogglePin(GREEN_13_GPIO_Port , GREEN_13_Pin);
 8000f7e:	2180      	movs	r1, #128	@ 0x80
 8000f80:	483a      	ldr	r0, [pc, #232]	@ (800106c <fsm_manual+0x330>)
 8000f82:	f000 fe28 	bl	8001bd6 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GREEN_24_GPIO_Port , GREEN_24_Pin);
 8000f86:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000f8a:	4838      	ldr	r0, [pc, #224]	@ (800106c <fsm_manual+0x330>)
 8000f8c:	f000 fe23 	bl	8001bd6 <HAL_GPIO_TogglePin>
			setTimer(1 , 500);
 8000f90:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8000f94:	2001      	movs	r0, #1
 8000f96:	f000 f9d5 	bl	8001344 <setTimer>
		if(isTimerFlagSet(2)){
 8000f9a:	2002      	movs	r0, #2
 8000f9c:	f000 f9f8 	bl	8001390 <isTimerFlagSet>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d016      	beq.n	8000fd4 <fsm_manual+0x298>
			setTimer(2 , 250);
 8000fa6:	21fa      	movs	r1, #250	@ 0xfa
 8000fa8:	2002      	movs	r0, #2
 8000faa:	f000 f9cb 	bl	8001344 <setTimer>
			updateBufer();
 8000fae:	f7ff fb41 	bl	8000634 <updateBufer>
			update7SegLed(index);
 8000fb2:	4b2f      	ldr	r3, [pc, #188]	@ (8001070 <fsm_manual+0x334>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f7ff fb94 	bl	80006e4 <update7SegLed>
			index++;
 8000fbc:	4b2c      	ldr	r3, [pc, #176]	@ (8001070 <fsm_manual+0x334>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	3301      	adds	r3, #1
 8000fc2:	4a2b      	ldr	r2, [pc, #172]	@ (8001070 <fsm_manual+0x334>)
 8000fc4:	6013      	str	r3, [r2, #0]
			if(index >= 4){
 8000fc6:	4b2a      	ldr	r3, [pc, #168]	@ (8001070 <fsm_manual+0x334>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	2b03      	cmp	r3, #3
 8000fcc:	dd02      	ble.n	8000fd4 <fsm_manual+0x298>
				index = 0;
 8000fce:	4b28      	ldr	r3, [pc, #160]	@ (8001070 <fsm_manual+0x334>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]
		if(isButtonPressed(MODIFY_BUTTON)){   // nhan tha --> +1
 8000fd4:	2001      	movs	r0, #1
 8000fd6:	f7ff f8b9 	bl	800014c <isButtonPressed>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d004      	beq.n	8000fea <fsm_manual+0x2ae>
			temp_time++;
 8000fe0:	4b1f      	ldr	r3, [pc, #124]	@ (8001060 <fsm_manual+0x324>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	3301      	adds	r3, #1
 8000fe6:	4a1e      	ldr	r2, [pc, #120]	@ (8001060 <fsm_manual+0x324>)
 8000fe8:	6013      	str	r3, [r2, #0]
		if(isButtonLongPressed(MODIFY_BUTTON)){ // nhan de --> +5
 8000fea:	2001      	movs	r0, #1
 8000fec:	f7ff f8c8 	bl	8000180 <isButtonLongPressed>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d004      	beq.n	8001000 <fsm_manual+0x2c4>
			temp_time += 5;
 8000ff6:	4b1a      	ldr	r3, [pc, #104]	@ (8001060 <fsm_manual+0x324>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	3305      	adds	r3, #5
 8000ffc:	4a18      	ldr	r2, [pc, #96]	@ (8001060 <fsm_manual+0x324>)
 8000ffe:	6013      	str	r3, [r2, #0]
		if(isButtonPressed(SET_BUTTON)){
 8001000:	2002      	movs	r0, #2
 8001002:	f7ff f8a3 	bl	800014c <isButtonPressed>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d013      	beq.n	8001034 <fsm_manual+0x2f8>
			turnoff_green();
 800100c:	f000 f85c 	bl	80010c8 <turnoff_green>
			status = INIT;
 8001010:	4b18      	ldr	r3, [pc, #96]	@ (8001074 <fsm_manual+0x338>)
 8001012:	2201      	movs	r2, #1
 8001014:	601a      	str	r2, [r3, #0]
			timeGreen = temp_time;
 8001016:	4b12      	ldr	r3, [pc, #72]	@ (8001060 <fsm_manual+0x324>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4a17      	ldr	r2, [pc, #92]	@ (8001078 <fsm_manual+0x33c>)
 800101c:	6013      	str	r3, [r2, #0]
			temp_time = 1;
 800101e:	4b10      	ldr	r3, [pc, #64]	@ (8001060 <fsm_manual+0x324>)
 8001020:	2201      	movs	r2, #1
 8001022:	601a      	str	r2, [r3, #0]
			time13 = timeRed;
 8001024:	4b15      	ldr	r3, [pc, #84]	@ (800107c <fsm_manual+0x340>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a0e      	ldr	r2, [pc, #56]	@ (8001064 <fsm_manual+0x328>)
 800102a:	6013      	str	r3, [r2, #0]
			time24 = timeGreen;
 800102c:	4b12      	ldr	r3, [pc, #72]	@ (8001078 <fsm_manual+0x33c>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a0d      	ldr	r2, [pc, #52]	@ (8001068 <fsm_manual+0x32c>)
 8001032:	6013      	str	r3, [r2, #0]
		if(isButtonPressed(MODE_BUTTON)==1){
 8001034:	2000      	movs	r0, #0
 8001036:	f7ff f889 	bl	800014c <isButtonPressed>
 800103a:	4603      	mov	r3, r0
 800103c:	2b01      	cmp	r3, #1
 800103e:	d10b      	bne.n	8001058 <fsm_manual+0x31c>
			turnoff_green();
 8001040:	f000 f842 	bl	80010c8 <turnoff_green>
			status = INIT;
 8001044:	4b0b      	ldr	r3, [pc, #44]	@ (8001074 <fsm_manual+0x338>)
 8001046:	2201      	movs	r2, #1
 8001048:	601a      	str	r2, [r3, #0]
		break;
 800104a:	e005      	b.n	8001058 <fsm_manual+0x31c>
		break;
 800104c:	bf00      	nop
 800104e:	e004      	b.n	800105a <fsm_manual+0x31e>
		break;
 8001050:	bf00      	nop
 8001052:	e002      	b.n	800105a <fsm_manual+0x31e>
		break;
 8001054:	bf00      	nop
 8001056:	e000      	b.n	800105a <fsm_manual+0x31e>
		break;
 8001058:	bf00      	nop
	}
}
 800105a:	bf00      	nop
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	2000003c 	.word	0x2000003c
 8001064:	200000a8 	.word	0x200000a8
 8001068:	200000ac 	.word	0x200000ac
 800106c:	40010800 	.word	0x40010800
 8001070:	200000a0 	.word	0x200000a0
 8001074:	200000a4 	.word	0x200000a4
 8001078:	20000044 	.word	0x20000044
 800107c:	20000040 	.word	0x20000040

08001080 <turnoff_red>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void turnoff_red(){
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED_13_GPIO_Port , RED_13_Pin , GPIO_PIN_SET);
 8001084:	2201      	movs	r2, #1
 8001086:	2120      	movs	r1, #32
 8001088:	4805      	ldr	r0, [pc, #20]	@ (80010a0 <turnoff_red+0x20>)
 800108a:	f000 fd8c 	bl	8001ba6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RED_24_GPIO_Port , RED_24_Pin , GPIO_PIN_SET);
 800108e:	2201      	movs	r2, #1
 8001090:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001094:	4802      	ldr	r0, [pc, #8]	@ (80010a0 <turnoff_red+0x20>)
 8001096:	f000 fd86 	bl	8001ba6 <HAL_GPIO_WritePin>
}
 800109a:	bf00      	nop
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	40010800 	.word	0x40010800

080010a4 <turnoff_yellow>:
void turnoff_yellow(){
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(YELLOW_13_GPIO_Port , YELLOW_13_Pin , GPIO_PIN_SET);
 80010a8:	2201      	movs	r2, #1
 80010aa:	2140      	movs	r1, #64	@ 0x40
 80010ac:	4805      	ldr	r0, [pc, #20]	@ (80010c4 <turnoff_yellow+0x20>)
 80010ae:	f000 fd7a 	bl	8001ba6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW_24_GPIO_Port , YELLOW_24_Pin , GPIO_PIN_SET);
 80010b2:	2201      	movs	r2, #1
 80010b4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80010b8:	4802      	ldr	r0, [pc, #8]	@ (80010c4 <turnoff_yellow+0x20>)
 80010ba:	f000 fd74 	bl	8001ba6 <HAL_GPIO_WritePin>
}
 80010be:	bf00      	nop
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	40010800 	.word	0x40010800

080010c8 <turnoff_green>:
void turnoff_green(){
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GREEN_13_GPIO_Port , GREEN_13_Pin , GPIO_PIN_SET);
 80010cc:	2201      	movs	r2, #1
 80010ce:	2180      	movs	r1, #128	@ 0x80
 80010d0:	4805      	ldr	r0, [pc, #20]	@ (80010e8 <turnoff_green+0x20>)
 80010d2:	f000 fd68 	bl	8001ba6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN_24_GPIO_Port , GREEN_24_Pin , GPIO_PIN_SET);
 80010d6:	2201      	movs	r2, #1
 80010d8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80010dc:	4802      	ldr	r0, [pc, #8]	@ (80010e8 <turnoff_green+0x20>)
 80010de:	f000 fd62 	bl	8001ba6 <HAL_GPIO_WritePin>
}
 80010e2:	bf00      	nop
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	40010800 	.word	0x40010800

080010ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010f0:	f000 fa56 	bl	80015a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010f4:	f000 f82a 	bl	800114c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010f8:	f000 f8b0 	bl	800125c <MX_GPIO_Init>
  MX_TIM2_Init();
 80010fc:	f000 f862 	bl	80011c4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8001100:	480f      	ldr	r0, [pc, #60]	@ (8001140 <main+0x54>)
 8001102:	f001 f9af 	bl	8002464 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_GPIO_WritePin(RED_13_GPIO_Port , RED_13_Pin , SET);
 8001106:	2201      	movs	r2, #1
 8001108:	2120      	movs	r1, #32
 800110a:	480e      	ldr	r0, [pc, #56]	@ (8001144 <main+0x58>)
 800110c:	f000 fd4b 	bl	8001ba6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(YELLOW_13_GPIO_Port , YELLOW_13_Pin , SET);
 8001110:	2201      	movs	r2, #1
 8001112:	2140      	movs	r1, #64	@ 0x40
 8001114:	480b      	ldr	r0, [pc, #44]	@ (8001144 <main+0x58>)
 8001116:	f000 fd46 	bl	8001ba6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GREEN_13_GPIO_Port , GREEN_13_Pin , SET);
 800111a:	2201      	movs	r2, #1
 800111c:	2180      	movs	r1, #128	@ 0x80
 800111e:	4809      	ldr	r0, [pc, #36]	@ (8001144 <main+0x58>)
 8001120:	f000 fd41 	bl	8001ba6 <HAL_GPIO_WritePin>

  status = 1;
 8001124:	4b08      	ldr	r3, [pc, #32]	@ (8001148 <main+0x5c>)
 8001126:	2201      	movs	r2, #1
 8001128:	601a      	str	r2, [r3, #0]
  setTimer(1 , 2000);
 800112a:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 800112e:	2001      	movs	r0, #1
 8001130:	f000 f908 	bl	8001344 <setTimer>
  while (1)
  {
	 fsm_automatic();
 8001134:	f7ff fb96 	bl	8000864 <fsm_automatic>
	 fsm_manual();
 8001138:	f7ff fe00 	bl	8000d3c <fsm_manual>
  {
 800113c:	bf00      	nop
 800113e:	e7f9      	b.n	8001134 <main+0x48>
 8001140:	200000b0 	.word	0x200000b0
 8001144:	40010800 	.word	0x40010800
 8001148:	200000a4 	.word	0x200000a4

0800114c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b090      	sub	sp, #64	@ 0x40
 8001150:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001152:	f107 0318 	add.w	r3, r7, #24
 8001156:	2228      	movs	r2, #40	@ 0x28
 8001158:	2100      	movs	r1, #0
 800115a:	4618      	mov	r0, r3
 800115c:	f001 fd0e 	bl	8002b7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001160:	1d3b      	adds	r3, r7, #4
 8001162:	2200      	movs	r2, #0
 8001164:	601a      	str	r2, [r3, #0]
 8001166:	605a      	str	r2, [r3, #4]
 8001168:	609a      	str	r2, [r3, #8]
 800116a:	60da      	str	r2, [r3, #12]
 800116c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800116e:	2302      	movs	r3, #2
 8001170:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001172:	2301      	movs	r3, #1
 8001174:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001176:	2310      	movs	r3, #16
 8001178:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800117a:	2300      	movs	r3, #0
 800117c:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800117e:	f107 0318 	add.w	r3, r7, #24
 8001182:	4618      	mov	r0, r3
 8001184:	f000 fd40 	bl	8001c08 <HAL_RCC_OscConfig>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800118e:	f000 f8d3 	bl	8001338 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001192:	230f      	movs	r3, #15
 8001194:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001196:	2300      	movs	r3, #0
 8001198:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800119a:	2300      	movs	r3, #0
 800119c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800119e:	2300      	movs	r3, #0
 80011a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011a2:	2300      	movs	r3, #0
 80011a4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80011a6:	1d3b      	adds	r3, r7, #4
 80011a8:	2100      	movs	r1, #0
 80011aa:	4618      	mov	r0, r3
 80011ac:	f000 ffae 	bl	800210c <HAL_RCC_ClockConfig>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80011b6:	f000 f8bf 	bl	8001338 <Error_Handler>
  }
}
 80011ba:	bf00      	nop
 80011bc:	3740      	adds	r7, #64	@ 0x40
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
	...

080011c4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b086      	sub	sp, #24
 80011c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011ca:	f107 0308 	add.w	r3, r7, #8
 80011ce:	2200      	movs	r2, #0
 80011d0:	601a      	str	r2, [r3, #0]
 80011d2:	605a      	str	r2, [r3, #4]
 80011d4:	609a      	str	r2, [r3, #8]
 80011d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011d8:	463b      	mov	r3, r7
 80011da:	2200      	movs	r2, #0
 80011dc:	601a      	str	r2, [r3, #0]
 80011de:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80011e0:	4b1d      	ldr	r3, [pc, #116]	@ (8001258 <MX_TIM2_Init+0x94>)
 80011e2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80011e6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80011e8:	4b1b      	ldr	r3, [pc, #108]	@ (8001258 <MX_TIM2_Init+0x94>)
 80011ea:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 80011ee:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011f0:	4b19      	ldr	r3, [pc, #100]	@ (8001258 <MX_TIM2_Init+0x94>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80011f6:	4b18      	ldr	r3, [pc, #96]	@ (8001258 <MX_TIM2_Init+0x94>)
 80011f8:	2209      	movs	r2, #9
 80011fa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011fc:	4b16      	ldr	r3, [pc, #88]	@ (8001258 <MX_TIM2_Init+0x94>)
 80011fe:	2200      	movs	r2, #0
 8001200:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001202:	4b15      	ldr	r3, [pc, #84]	@ (8001258 <MX_TIM2_Init+0x94>)
 8001204:	2200      	movs	r2, #0
 8001206:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001208:	4813      	ldr	r0, [pc, #76]	@ (8001258 <MX_TIM2_Init+0x94>)
 800120a:	f001 f8db 	bl	80023c4 <HAL_TIM_Base_Init>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001214:	f000 f890 	bl	8001338 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001218:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800121c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800121e:	f107 0308 	add.w	r3, r7, #8
 8001222:	4619      	mov	r1, r3
 8001224:	480c      	ldr	r0, [pc, #48]	@ (8001258 <MX_TIM2_Init+0x94>)
 8001226:	f001 fa59 	bl	80026dc <HAL_TIM_ConfigClockSource>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001230:	f000 f882 	bl	8001338 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001234:	2300      	movs	r3, #0
 8001236:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001238:	2300      	movs	r3, #0
 800123a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800123c:	463b      	mov	r3, r7
 800123e:	4619      	mov	r1, r3
 8001240:	4805      	ldr	r0, [pc, #20]	@ (8001258 <MX_TIM2_Init+0x94>)
 8001242:	f001 fc31 	bl	8002aa8 <HAL_TIMEx_MasterConfigSynchronization>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800124c:	f000 f874 	bl	8001338 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001250:	bf00      	nop
 8001252:	3718      	adds	r7, #24
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	200000b0 	.word	0x200000b0

0800125c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b086      	sub	sp, #24
 8001260:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001262:	f107 0308 	add.w	r3, r7, #8
 8001266:	2200      	movs	r2, #0
 8001268:	601a      	str	r2, [r3, #0]
 800126a:	605a      	str	r2, [r3, #4]
 800126c:	609a      	str	r2, [r3, #8]
 800126e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001270:	4b28      	ldr	r3, [pc, #160]	@ (8001314 <MX_GPIO_Init+0xb8>)
 8001272:	699b      	ldr	r3, [r3, #24]
 8001274:	4a27      	ldr	r2, [pc, #156]	@ (8001314 <MX_GPIO_Init+0xb8>)
 8001276:	f043 0304 	orr.w	r3, r3, #4
 800127a:	6193      	str	r3, [r2, #24]
 800127c:	4b25      	ldr	r3, [pc, #148]	@ (8001314 <MX_GPIO_Init+0xb8>)
 800127e:	699b      	ldr	r3, [r3, #24]
 8001280:	f003 0304 	and.w	r3, r3, #4
 8001284:	607b      	str	r3, [r7, #4]
 8001286:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001288:	4b22      	ldr	r3, [pc, #136]	@ (8001314 <MX_GPIO_Init+0xb8>)
 800128a:	699b      	ldr	r3, [r3, #24]
 800128c:	4a21      	ldr	r2, [pc, #132]	@ (8001314 <MX_GPIO_Init+0xb8>)
 800128e:	f043 0308 	orr.w	r3, r3, #8
 8001292:	6193      	str	r3, [r2, #24]
 8001294:	4b1f      	ldr	r3, [pc, #124]	@ (8001314 <MX_GPIO_Init+0xb8>)
 8001296:	699b      	ldr	r3, [r3, #24]
 8001298:	f003 0308 	and.w	r3, r3, #8
 800129c:	603b      	str	r3, [r7, #0]
 800129e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RED_13_Pin|YELLOW_13_Pin|GREEN_13_Pin|RED_24_Pin
 80012a0:	2200      	movs	r2, #0
 80012a2:	f44f 61fc 	mov.w	r1, #2016	@ 0x7e0
 80012a6:	481c      	ldr	r0, [pc, #112]	@ (8001318 <MX_GPIO_Init+0xbc>)
 80012a8:	f000 fc7d 	bl	8001ba6 <HAL_GPIO_WritePin>
                          |YELLOW_24_Pin|GREEN_24_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, a_Pin|b_Pin|c_Pin|en4_Pin
 80012ac:	2200      	movs	r2, #0
 80012ae:	f240 71ff 	movw	r1, #2047	@ 0x7ff
 80012b2:	481a      	ldr	r0, [pc, #104]	@ (800131c <MX_GPIO_Init+0xc0>)
 80012b4:	f000 fc77 	bl	8001ba6 <HAL_GPIO_WritePin>
                          |d_Pin|e_Pin|f_Pin|g_Pin
                          |en1_Pin|en2_Pin|en3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : MODE_BUTTON_Pin MODIFY_BUTTON_Pin SET_BUTTON_Pin */
  GPIO_InitStruct.Pin = MODE_BUTTON_Pin|MODIFY_BUTTON_Pin|SET_BUTTON_Pin;
 80012b8:	231c      	movs	r3, #28
 80012ba:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012bc:	2300      	movs	r3, #0
 80012be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012c0:	2301      	movs	r3, #1
 80012c2:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c4:	f107 0308 	add.w	r3, r7, #8
 80012c8:	4619      	mov	r1, r3
 80012ca:	4813      	ldr	r0, [pc, #76]	@ (8001318 <MX_GPIO_Init+0xbc>)
 80012cc:	f000 fad8 	bl	8001880 <HAL_GPIO_Init>

  /*Configure GPIO pins : RED_13_Pin YELLOW_13_Pin GREEN_13_Pin RED_24_Pin
                           YELLOW_24_Pin GREEN_24_Pin */
  GPIO_InitStruct.Pin = RED_13_Pin|YELLOW_13_Pin|GREEN_13_Pin|RED_24_Pin
 80012d0:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80012d4:	60bb      	str	r3, [r7, #8]
                          |YELLOW_24_Pin|GREEN_24_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012d6:	2301      	movs	r3, #1
 80012d8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012da:	2300      	movs	r3, #0
 80012dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012de:	2302      	movs	r3, #2
 80012e0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012e2:	f107 0308 	add.w	r3, r7, #8
 80012e6:	4619      	mov	r1, r3
 80012e8:	480b      	ldr	r0, [pc, #44]	@ (8001318 <MX_GPIO_Init+0xbc>)
 80012ea:	f000 fac9 	bl	8001880 <HAL_GPIO_Init>

  /*Configure GPIO pins : a_Pin b_Pin c_Pin en4_Pin
                           d_Pin e_Pin f_Pin g_Pin
                           en1_Pin en2_Pin en3_Pin */
  GPIO_InitStruct.Pin = a_Pin|b_Pin|c_Pin|en4_Pin
 80012ee:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80012f2:	60bb      	str	r3, [r7, #8]
                          |d_Pin|e_Pin|f_Pin|g_Pin
                          |en1_Pin|en2_Pin|en3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012f4:	2301      	movs	r3, #1
 80012f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f8:	2300      	movs	r3, #0
 80012fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012fc:	2302      	movs	r3, #2
 80012fe:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001300:	f107 0308 	add.w	r3, r7, #8
 8001304:	4619      	mov	r1, r3
 8001306:	4805      	ldr	r0, [pc, #20]	@ (800131c <MX_GPIO_Init+0xc0>)
 8001308:	f000 faba 	bl	8001880 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800130c:	bf00      	nop
 800130e:	3718      	adds	r7, #24
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	40021000 	.word	0x40021000
 8001318:	40010800 	.word	0x40010800
 800131c:	40010c00 	.word	0x40010c00

08001320 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
	timerRun();
 8001328:	f000 f852 	bl	80013d0 <timerRun>
	getKeyInput();
 800132c:	f7fe ff42 	bl	80001b4 <getKeyInput>
}
 8001330:	bf00      	nop
 8001332:	3708      	adds	r7, #8
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}

08001338 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800133c:	b672      	cpsid	i
}
 800133e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001340:	bf00      	nop
 8001342:	e7fd      	b.n	8001340 <Error_Handler+0x8>

08001344 <setTimer>:

int timer_counter[NUM_OF_TIMERS] = {0};
int timer_flag[NUM_OF_TIMERS] = {0};


void setTimer(int index, int duration) {
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
 800134c:	6039      	str	r1, [r7, #0]
	if (index >= 0 && index < NUM_OF_TIMERS) {
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2b00      	cmp	r3, #0
 8001352:	db12      	blt.n	800137a <setTimer+0x36>
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2b04      	cmp	r3, #4
 8001358:	dc0f      	bgt.n	800137a <setTimer+0x36>
		timer_counter[index] = duration / TIMER_CYCLE;
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	4a09      	ldr	r2, [pc, #36]	@ (8001384 <setTimer+0x40>)
 800135e:	fb82 1203 	smull	r1, r2, r2, r3
 8001362:	1092      	asrs	r2, r2, #2
 8001364:	17db      	asrs	r3, r3, #31
 8001366:	1ad2      	subs	r2, r2, r3
 8001368:	4907      	ldr	r1, [pc, #28]	@ (8001388 <setTimer+0x44>)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		timer_flag[index] = 0;
 8001370:	4a06      	ldr	r2, [pc, #24]	@ (800138c <setTimer+0x48>)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2100      	movs	r1, #0
 8001376:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	}
}
 800137a:	bf00      	nop
 800137c:	370c      	adds	r7, #12
 800137e:	46bd      	mov	sp, r7
 8001380:	bc80      	pop	{r7}
 8001382:	4770      	bx	lr
 8001384:	66666667 	.word	0x66666667
 8001388:	200000f8 	.word	0x200000f8
 800138c:	2000010c 	.word	0x2000010c

08001390 <isTimerFlagSet>:


int isTimerFlagSet(int index){
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
	if (index >= 0 && index < NUM_OF_TIMERS) {
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2b00      	cmp	r3, #0
 800139c:	db0f      	blt.n	80013be <isTimerFlagSet+0x2e>
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2b04      	cmp	r3, #4
 80013a2:	dc0c      	bgt.n	80013be <isTimerFlagSet+0x2e>
		if (timer_flag[index] == 1) {
 80013a4:	4a09      	ldr	r2, [pc, #36]	@ (80013cc <isTimerFlagSet+0x3c>)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013ac:	2b01      	cmp	r3, #1
 80013ae:	d106      	bne.n	80013be <isTimerFlagSet+0x2e>
			timer_flag[index] = 0;
 80013b0:	4a06      	ldr	r2, [pc, #24]	@ (80013cc <isTimerFlagSet+0x3c>)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2100      	movs	r1, #0
 80013b6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			return 1;
 80013ba:	2301      	movs	r3, #1
 80013bc:	e000      	b.n	80013c0 <isTimerFlagSet+0x30>
		}
	}
	return 0;
 80013be:	2300      	movs	r3, #0
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	370c      	adds	r7, #12
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bc80      	pop	{r7}
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	2000010c 	.word	0x2000010c

080013d0 <timerRun>:


void timerRun() {
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_OF_TIMERS; i++) {
 80013d6:	2300      	movs	r3, #0
 80013d8:	607b      	str	r3, [r7, #4]
 80013da:	e01c      	b.n	8001416 <timerRun+0x46>
		if (timer_counter[i] > 0) {
 80013dc:	4a12      	ldr	r2, [pc, #72]	@ (8001428 <timerRun+0x58>)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	dd13      	ble.n	8001410 <timerRun+0x40>
			timer_counter[i]--;
 80013e8:	4a0f      	ldr	r2, [pc, #60]	@ (8001428 <timerRun+0x58>)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013f0:	1e5a      	subs	r2, r3, #1
 80013f2:	490d      	ldr	r1, [pc, #52]	@ (8001428 <timerRun+0x58>)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (timer_counter[i] <= 0) {
 80013fa:	4a0b      	ldr	r2, [pc, #44]	@ (8001428 <timerRun+0x58>)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001402:	2b00      	cmp	r3, #0
 8001404:	dc04      	bgt.n	8001410 <timerRun+0x40>
				timer_flag[i] = 1;
 8001406:	4a09      	ldr	r2, [pc, #36]	@ (800142c <timerRun+0x5c>)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2101      	movs	r1, #1
 800140c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < NUM_OF_TIMERS; i++) {
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	3301      	adds	r3, #1
 8001414:	607b      	str	r3, [r7, #4]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2b04      	cmp	r3, #4
 800141a:	dddf      	ble.n	80013dc <timerRun+0xc>
			}
		}
	}
}
 800141c:	bf00      	nop
 800141e:	bf00      	nop
 8001420:	370c      	adds	r7, #12
 8001422:	46bd      	mov	sp, r7
 8001424:	bc80      	pop	{r7}
 8001426:	4770      	bx	lr
 8001428:	200000f8 	.word	0x200000f8
 800142c:	2000010c 	.word	0x2000010c

08001430 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001430:	b480      	push	{r7}
 8001432:	b085      	sub	sp, #20
 8001434:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001436:	4b15      	ldr	r3, [pc, #84]	@ (800148c <HAL_MspInit+0x5c>)
 8001438:	699b      	ldr	r3, [r3, #24]
 800143a:	4a14      	ldr	r2, [pc, #80]	@ (800148c <HAL_MspInit+0x5c>)
 800143c:	f043 0301 	orr.w	r3, r3, #1
 8001440:	6193      	str	r3, [r2, #24]
 8001442:	4b12      	ldr	r3, [pc, #72]	@ (800148c <HAL_MspInit+0x5c>)
 8001444:	699b      	ldr	r3, [r3, #24]
 8001446:	f003 0301 	and.w	r3, r3, #1
 800144a:	60bb      	str	r3, [r7, #8]
 800144c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800144e:	4b0f      	ldr	r3, [pc, #60]	@ (800148c <HAL_MspInit+0x5c>)
 8001450:	69db      	ldr	r3, [r3, #28]
 8001452:	4a0e      	ldr	r2, [pc, #56]	@ (800148c <HAL_MspInit+0x5c>)
 8001454:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001458:	61d3      	str	r3, [r2, #28]
 800145a:	4b0c      	ldr	r3, [pc, #48]	@ (800148c <HAL_MspInit+0x5c>)
 800145c:	69db      	ldr	r3, [r3, #28]
 800145e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001462:	607b      	str	r3, [r7, #4]
 8001464:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001466:	4b0a      	ldr	r3, [pc, #40]	@ (8001490 <HAL_MspInit+0x60>)
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	60fb      	str	r3, [r7, #12]
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001472:	60fb      	str	r3, [r7, #12]
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800147a:	60fb      	str	r3, [r7, #12]
 800147c:	4a04      	ldr	r2, [pc, #16]	@ (8001490 <HAL_MspInit+0x60>)
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001482:	bf00      	nop
 8001484:	3714      	adds	r7, #20
 8001486:	46bd      	mov	sp, r7
 8001488:	bc80      	pop	{r7}
 800148a:	4770      	bx	lr
 800148c:	40021000 	.word	0x40021000
 8001490:	40010000 	.word	0x40010000

08001494 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b084      	sub	sp, #16
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80014a4:	d113      	bne.n	80014ce <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014a6:	4b0c      	ldr	r3, [pc, #48]	@ (80014d8 <HAL_TIM_Base_MspInit+0x44>)
 80014a8:	69db      	ldr	r3, [r3, #28]
 80014aa:	4a0b      	ldr	r2, [pc, #44]	@ (80014d8 <HAL_TIM_Base_MspInit+0x44>)
 80014ac:	f043 0301 	orr.w	r3, r3, #1
 80014b0:	61d3      	str	r3, [r2, #28]
 80014b2:	4b09      	ldr	r3, [pc, #36]	@ (80014d8 <HAL_TIM_Base_MspInit+0x44>)
 80014b4:	69db      	ldr	r3, [r3, #28]
 80014b6:	f003 0301 	and.w	r3, r3, #1
 80014ba:	60fb      	str	r3, [r7, #12]
 80014bc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80014be:	2200      	movs	r2, #0
 80014c0:	2100      	movs	r1, #0
 80014c2:	201c      	movs	r0, #28
 80014c4:	f000 f9a5 	bl	8001812 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80014c8:	201c      	movs	r0, #28
 80014ca:	f000 f9be 	bl	800184a <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80014ce:	bf00      	nop
 80014d0:	3710      	adds	r7, #16
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	40021000 	.word	0x40021000

080014dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014e0:	bf00      	nop
 80014e2:	e7fd      	b.n	80014e0 <NMI_Handler+0x4>

080014e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014e8:	bf00      	nop
 80014ea:	e7fd      	b.n	80014e8 <HardFault_Handler+0x4>

080014ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014f0:	bf00      	nop
 80014f2:	e7fd      	b.n	80014f0 <MemManage_Handler+0x4>

080014f4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014f8:	bf00      	nop
 80014fa:	e7fd      	b.n	80014f8 <BusFault_Handler+0x4>

080014fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001500:	bf00      	nop
 8001502:	e7fd      	b.n	8001500 <UsageFault_Handler+0x4>

08001504 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001508:	bf00      	nop
 800150a:	46bd      	mov	sp, r7
 800150c:	bc80      	pop	{r7}
 800150e:	4770      	bx	lr

08001510 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001514:	bf00      	nop
 8001516:	46bd      	mov	sp, r7
 8001518:	bc80      	pop	{r7}
 800151a:	4770      	bx	lr

0800151c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001520:	bf00      	nop
 8001522:	46bd      	mov	sp, r7
 8001524:	bc80      	pop	{r7}
 8001526:	4770      	bx	lr

08001528 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800152c:	f000 f87e 	bl	800162c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001530:	bf00      	nop
 8001532:	bd80      	pop	{r7, pc}

08001534 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001538:	4802      	ldr	r0, [pc, #8]	@ (8001544 <TIM2_IRQHandler+0x10>)
 800153a:	f000 ffdf 	bl	80024fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800153e:	bf00      	nop
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	200000b0 	.word	0x200000b0

08001548 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800154c:	bf00      	nop
 800154e:	46bd      	mov	sp, r7
 8001550:	bc80      	pop	{r7}
 8001552:	4770      	bx	lr

08001554 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001554:	f7ff fff8 	bl	8001548 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001558:	480b      	ldr	r0, [pc, #44]	@ (8001588 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800155a:	490c      	ldr	r1, [pc, #48]	@ (800158c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800155c:	4a0c      	ldr	r2, [pc, #48]	@ (8001590 <LoopFillZerobss+0x16>)
  movs r3, #0
 800155e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001560:	e002      	b.n	8001568 <LoopCopyDataInit>

08001562 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001562:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001564:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001566:	3304      	adds	r3, #4

08001568 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001568:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800156a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800156c:	d3f9      	bcc.n	8001562 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800156e:	4a09      	ldr	r2, [pc, #36]	@ (8001594 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001570:	4c09      	ldr	r4, [pc, #36]	@ (8001598 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001572:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001574:	e001      	b.n	800157a <LoopFillZerobss>

08001576 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001576:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001578:	3204      	adds	r2, #4

0800157a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800157a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800157c:	d3fb      	bcc.n	8001576 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800157e:	f001 fb05 	bl	8002b8c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001582:	f7ff fdb3 	bl	80010ec <main>
  bx lr
 8001586:	4770      	bx	lr
  ldr r0, =_sdata
 8001588:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800158c:	20000058 	.word	0x20000058
  ldr r2, =_sidata
 8001590:	08002c18 	.word	0x08002c18
  ldr r2, =_sbss
 8001594:	20000058 	.word	0x20000058
  ldr r4, =_ebss
 8001598:	20000124 	.word	0x20000124

0800159c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800159c:	e7fe      	b.n	800159c <ADC1_2_IRQHandler>
	...

080015a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015a4:	4b08      	ldr	r3, [pc, #32]	@ (80015c8 <HAL_Init+0x28>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a07      	ldr	r2, [pc, #28]	@ (80015c8 <HAL_Init+0x28>)
 80015aa:	f043 0310 	orr.w	r3, r3, #16
 80015ae:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015b0:	2003      	movs	r0, #3
 80015b2:	f000 f923 	bl	80017fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015b6:	200f      	movs	r0, #15
 80015b8:	f000 f808 	bl	80015cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015bc:	f7ff ff38 	bl	8001430 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015c0:	2300      	movs	r3, #0
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	40022000 	.word	0x40022000

080015cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015d4:	4b12      	ldr	r3, [pc, #72]	@ (8001620 <HAL_InitTick+0x54>)
 80015d6:	681a      	ldr	r2, [r3, #0]
 80015d8:	4b12      	ldr	r3, [pc, #72]	@ (8001624 <HAL_InitTick+0x58>)
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	4619      	mov	r1, r3
 80015de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80015e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80015ea:	4618      	mov	r0, r3
 80015ec:	f000 f93b 	bl	8001866 <HAL_SYSTICK_Config>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	e00e      	b.n	8001618 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2b0f      	cmp	r3, #15
 80015fe:	d80a      	bhi.n	8001616 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001600:	2200      	movs	r2, #0
 8001602:	6879      	ldr	r1, [r7, #4]
 8001604:	f04f 30ff 	mov.w	r0, #4294967295
 8001608:	f000 f903 	bl	8001812 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800160c:	4a06      	ldr	r2, [pc, #24]	@ (8001628 <HAL_InitTick+0x5c>)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001612:	2300      	movs	r3, #0
 8001614:	e000      	b.n	8001618 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
}
 8001618:	4618      	mov	r0, r3
 800161a:	3708      	adds	r7, #8
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	2000004c 	.word	0x2000004c
 8001624:	20000054 	.word	0x20000054
 8001628:	20000050 	.word	0x20000050

0800162c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001630:	4b05      	ldr	r3, [pc, #20]	@ (8001648 <HAL_IncTick+0x1c>)
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	461a      	mov	r2, r3
 8001636:	4b05      	ldr	r3, [pc, #20]	@ (800164c <HAL_IncTick+0x20>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4413      	add	r3, r2
 800163c:	4a03      	ldr	r2, [pc, #12]	@ (800164c <HAL_IncTick+0x20>)
 800163e:	6013      	str	r3, [r2, #0]
}
 8001640:	bf00      	nop
 8001642:	46bd      	mov	sp, r7
 8001644:	bc80      	pop	{r7}
 8001646:	4770      	bx	lr
 8001648:	20000054 	.word	0x20000054
 800164c:	20000120 	.word	0x20000120

08001650 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  return uwTick;
 8001654:	4b02      	ldr	r3, [pc, #8]	@ (8001660 <HAL_GetTick+0x10>)
 8001656:	681b      	ldr	r3, [r3, #0]
}
 8001658:	4618      	mov	r0, r3
 800165a:	46bd      	mov	sp, r7
 800165c:	bc80      	pop	{r7}
 800165e:	4770      	bx	lr
 8001660:	20000120 	.word	0x20000120

08001664 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001664:	b480      	push	{r7}
 8001666:	b085      	sub	sp, #20
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	f003 0307 	and.w	r3, r3, #7
 8001672:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001674:	4b0c      	ldr	r3, [pc, #48]	@ (80016a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001676:	68db      	ldr	r3, [r3, #12]
 8001678:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800167a:	68ba      	ldr	r2, [r7, #8]
 800167c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001680:	4013      	ands	r3, r2
 8001682:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800168c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001690:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001694:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001696:	4a04      	ldr	r2, [pc, #16]	@ (80016a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001698:	68bb      	ldr	r3, [r7, #8]
 800169a:	60d3      	str	r3, [r2, #12]
}
 800169c:	bf00      	nop
 800169e:	3714      	adds	r7, #20
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bc80      	pop	{r7}
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop
 80016a8:	e000ed00 	.word	0xe000ed00

080016ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016b0:	4b04      	ldr	r3, [pc, #16]	@ (80016c4 <__NVIC_GetPriorityGrouping+0x18>)
 80016b2:	68db      	ldr	r3, [r3, #12]
 80016b4:	0a1b      	lsrs	r3, r3, #8
 80016b6:	f003 0307 	and.w	r3, r3, #7
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	46bd      	mov	sp, r7
 80016be:	bc80      	pop	{r7}
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	e000ed00 	.word	0xe000ed00

080016c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	4603      	mov	r3, r0
 80016d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	db0b      	blt.n	80016f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016da:	79fb      	ldrb	r3, [r7, #7]
 80016dc:	f003 021f 	and.w	r2, r3, #31
 80016e0:	4906      	ldr	r1, [pc, #24]	@ (80016fc <__NVIC_EnableIRQ+0x34>)
 80016e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e6:	095b      	lsrs	r3, r3, #5
 80016e8:	2001      	movs	r0, #1
 80016ea:	fa00 f202 	lsl.w	r2, r0, r2
 80016ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016f2:	bf00      	nop
 80016f4:	370c      	adds	r7, #12
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bc80      	pop	{r7}
 80016fa:	4770      	bx	lr
 80016fc:	e000e100 	.word	0xe000e100

08001700 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
 8001706:	4603      	mov	r3, r0
 8001708:	6039      	str	r1, [r7, #0]
 800170a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800170c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001710:	2b00      	cmp	r3, #0
 8001712:	db0a      	blt.n	800172a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	b2da      	uxtb	r2, r3
 8001718:	490c      	ldr	r1, [pc, #48]	@ (800174c <__NVIC_SetPriority+0x4c>)
 800171a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800171e:	0112      	lsls	r2, r2, #4
 8001720:	b2d2      	uxtb	r2, r2
 8001722:	440b      	add	r3, r1
 8001724:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001728:	e00a      	b.n	8001740 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	b2da      	uxtb	r2, r3
 800172e:	4908      	ldr	r1, [pc, #32]	@ (8001750 <__NVIC_SetPriority+0x50>)
 8001730:	79fb      	ldrb	r3, [r7, #7]
 8001732:	f003 030f 	and.w	r3, r3, #15
 8001736:	3b04      	subs	r3, #4
 8001738:	0112      	lsls	r2, r2, #4
 800173a:	b2d2      	uxtb	r2, r2
 800173c:	440b      	add	r3, r1
 800173e:	761a      	strb	r2, [r3, #24]
}
 8001740:	bf00      	nop
 8001742:	370c      	adds	r7, #12
 8001744:	46bd      	mov	sp, r7
 8001746:	bc80      	pop	{r7}
 8001748:	4770      	bx	lr
 800174a:	bf00      	nop
 800174c:	e000e100 	.word	0xe000e100
 8001750:	e000ed00 	.word	0xe000ed00

08001754 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001754:	b480      	push	{r7}
 8001756:	b089      	sub	sp, #36	@ 0x24
 8001758:	af00      	add	r7, sp, #0
 800175a:	60f8      	str	r0, [r7, #12]
 800175c:	60b9      	str	r1, [r7, #8]
 800175e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	f003 0307 	and.w	r3, r3, #7
 8001766:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001768:	69fb      	ldr	r3, [r7, #28]
 800176a:	f1c3 0307 	rsb	r3, r3, #7
 800176e:	2b04      	cmp	r3, #4
 8001770:	bf28      	it	cs
 8001772:	2304      	movcs	r3, #4
 8001774:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001776:	69fb      	ldr	r3, [r7, #28]
 8001778:	3304      	adds	r3, #4
 800177a:	2b06      	cmp	r3, #6
 800177c:	d902      	bls.n	8001784 <NVIC_EncodePriority+0x30>
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	3b03      	subs	r3, #3
 8001782:	e000      	b.n	8001786 <NVIC_EncodePriority+0x32>
 8001784:	2300      	movs	r3, #0
 8001786:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001788:	f04f 32ff 	mov.w	r2, #4294967295
 800178c:	69bb      	ldr	r3, [r7, #24]
 800178e:	fa02 f303 	lsl.w	r3, r2, r3
 8001792:	43da      	mvns	r2, r3
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	401a      	ands	r2, r3
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800179c:	f04f 31ff 	mov.w	r1, #4294967295
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	fa01 f303 	lsl.w	r3, r1, r3
 80017a6:	43d9      	mvns	r1, r3
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017ac:	4313      	orrs	r3, r2
         );
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3724      	adds	r7, #36	@ 0x24
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bc80      	pop	{r7}
 80017b6:	4770      	bx	lr

080017b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	3b01      	subs	r3, #1
 80017c4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80017c8:	d301      	bcc.n	80017ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017ca:	2301      	movs	r3, #1
 80017cc:	e00f      	b.n	80017ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017ce:	4a0a      	ldr	r2, [pc, #40]	@ (80017f8 <SysTick_Config+0x40>)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	3b01      	subs	r3, #1
 80017d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017d6:	210f      	movs	r1, #15
 80017d8:	f04f 30ff 	mov.w	r0, #4294967295
 80017dc:	f7ff ff90 	bl	8001700 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017e0:	4b05      	ldr	r3, [pc, #20]	@ (80017f8 <SysTick_Config+0x40>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017e6:	4b04      	ldr	r3, [pc, #16]	@ (80017f8 <SysTick_Config+0x40>)
 80017e8:	2207      	movs	r2, #7
 80017ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017ec:	2300      	movs	r3, #0
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	3708      	adds	r7, #8
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	e000e010 	.word	0xe000e010

080017fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001804:	6878      	ldr	r0, [r7, #4]
 8001806:	f7ff ff2d 	bl	8001664 <__NVIC_SetPriorityGrouping>
}
 800180a:	bf00      	nop
 800180c:	3708      	adds	r7, #8
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}

08001812 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001812:	b580      	push	{r7, lr}
 8001814:	b086      	sub	sp, #24
 8001816:	af00      	add	r7, sp, #0
 8001818:	4603      	mov	r3, r0
 800181a:	60b9      	str	r1, [r7, #8]
 800181c:	607a      	str	r2, [r7, #4]
 800181e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001820:	2300      	movs	r3, #0
 8001822:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001824:	f7ff ff42 	bl	80016ac <__NVIC_GetPriorityGrouping>
 8001828:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800182a:	687a      	ldr	r2, [r7, #4]
 800182c:	68b9      	ldr	r1, [r7, #8]
 800182e:	6978      	ldr	r0, [r7, #20]
 8001830:	f7ff ff90 	bl	8001754 <NVIC_EncodePriority>
 8001834:	4602      	mov	r2, r0
 8001836:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800183a:	4611      	mov	r1, r2
 800183c:	4618      	mov	r0, r3
 800183e:	f7ff ff5f 	bl	8001700 <__NVIC_SetPriority>
}
 8001842:	bf00      	nop
 8001844:	3718      	adds	r7, #24
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}

0800184a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800184a:	b580      	push	{r7, lr}
 800184c:	b082      	sub	sp, #8
 800184e:	af00      	add	r7, sp, #0
 8001850:	4603      	mov	r3, r0
 8001852:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001854:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001858:	4618      	mov	r0, r3
 800185a:	f7ff ff35 	bl	80016c8 <__NVIC_EnableIRQ>
}
 800185e:	bf00      	nop
 8001860:	3708      	adds	r7, #8
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}

08001866 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001866:	b580      	push	{r7, lr}
 8001868:	b082      	sub	sp, #8
 800186a:	af00      	add	r7, sp, #0
 800186c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800186e:	6878      	ldr	r0, [r7, #4]
 8001870:	f7ff ffa2 	bl	80017b8 <SysTick_Config>
 8001874:	4603      	mov	r3, r0
}
 8001876:	4618      	mov	r0, r3
 8001878:	3708      	adds	r7, #8
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
	...

08001880 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001880:	b480      	push	{r7}
 8001882:	b08b      	sub	sp, #44	@ 0x2c
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
 8001888:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800188a:	2300      	movs	r3, #0
 800188c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800188e:	2300      	movs	r3, #0
 8001890:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001892:	e161      	b.n	8001b58 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001894:	2201      	movs	r2, #1
 8001896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001898:	fa02 f303 	lsl.w	r3, r2, r3
 800189c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	69fa      	ldr	r2, [r7, #28]
 80018a4:	4013      	ands	r3, r2
 80018a6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80018a8:	69ba      	ldr	r2, [r7, #24]
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	429a      	cmp	r2, r3
 80018ae:	f040 8150 	bne.w	8001b52 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	4a97      	ldr	r2, [pc, #604]	@ (8001b14 <HAL_GPIO_Init+0x294>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d05e      	beq.n	800197a <HAL_GPIO_Init+0xfa>
 80018bc:	4a95      	ldr	r2, [pc, #596]	@ (8001b14 <HAL_GPIO_Init+0x294>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d875      	bhi.n	80019ae <HAL_GPIO_Init+0x12e>
 80018c2:	4a95      	ldr	r2, [pc, #596]	@ (8001b18 <HAL_GPIO_Init+0x298>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d058      	beq.n	800197a <HAL_GPIO_Init+0xfa>
 80018c8:	4a93      	ldr	r2, [pc, #588]	@ (8001b18 <HAL_GPIO_Init+0x298>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d86f      	bhi.n	80019ae <HAL_GPIO_Init+0x12e>
 80018ce:	4a93      	ldr	r2, [pc, #588]	@ (8001b1c <HAL_GPIO_Init+0x29c>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d052      	beq.n	800197a <HAL_GPIO_Init+0xfa>
 80018d4:	4a91      	ldr	r2, [pc, #580]	@ (8001b1c <HAL_GPIO_Init+0x29c>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d869      	bhi.n	80019ae <HAL_GPIO_Init+0x12e>
 80018da:	4a91      	ldr	r2, [pc, #580]	@ (8001b20 <HAL_GPIO_Init+0x2a0>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	d04c      	beq.n	800197a <HAL_GPIO_Init+0xfa>
 80018e0:	4a8f      	ldr	r2, [pc, #572]	@ (8001b20 <HAL_GPIO_Init+0x2a0>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d863      	bhi.n	80019ae <HAL_GPIO_Init+0x12e>
 80018e6:	4a8f      	ldr	r2, [pc, #572]	@ (8001b24 <HAL_GPIO_Init+0x2a4>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d046      	beq.n	800197a <HAL_GPIO_Init+0xfa>
 80018ec:	4a8d      	ldr	r2, [pc, #564]	@ (8001b24 <HAL_GPIO_Init+0x2a4>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d85d      	bhi.n	80019ae <HAL_GPIO_Init+0x12e>
 80018f2:	2b12      	cmp	r3, #18
 80018f4:	d82a      	bhi.n	800194c <HAL_GPIO_Init+0xcc>
 80018f6:	2b12      	cmp	r3, #18
 80018f8:	d859      	bhi.n	80019ae <HAL_GPIO_Init+0x12e>
 80018fa:	a201      	add	r2, pc, #4	@ (adr r2, 8001900 <HAL_GPIO_Init+0x80>)
 80018fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001900:	0800197b 	.word	0x0800197b
 8001904:	08001955 	.word	0x08001955
 8001908:	08001967 	.word	0x08001967
 800190c:	080019a9 	.word	0x080019a9
 8001910:	080019af 	.word	0x080019af
 8001914:	080019af 	.word	0x080019af
 8001918:	080019af 	.word	0x080019af
 800191c:	080019af 	.word	0x080019af
 8001920:	080019af 	.word	0x080019af
 8001924:	080019af 	.word	0x080019af
 8001928:	080019af 	.word	0x080019af
 800192c:	080019af 	.word	0x080019af
 8001930:	080019af 	.word	0x080019af
 8001934:	080019af 	.word	0x080019af
 8001938:	080019af 	.word	0x080019af
 800193c:	080019af 	.word	0x080019af
 8001940:	080019af 	.word	0x080019af
 8001944:	0800195d 	.word	0x0800195d
 8001948:	08001971 	.word	0x08001971
 800194c:	4a76      	ldr	r2, [pc, #472]	@ (8001b28 <HAL_GPIO_Init+0x2a8>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d013      	beq.n	800197a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001952:	e02c      	b.n	80019ae <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	68db      	ldr	r3, [r3, #12]
 8001958:	623b      	str	r3, [r7, #32]
          break;
 800195a:	e029      	b.n	80019b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	68db      	ldr	r3, [r3, #12]
 8001960:	3304      	adds	r3, #4
 8001962:	623b      	str	r3, [r7, #32]
          break;
 8001964:	e024      	b.n	80019b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	68db      	ldr	r3, [r3, #12]
 800196a:	3308      	adds	r3, #8
 800196c:	623b      	str	r3, [r7, #32]
          break;
 800196e:	e01f      	b.n	80019b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	330c      	adds	r3, #12
 8001976:	623b      	str	r3, [r7, #32]
          break;
 8001978:	e01a      	b.n	80019b0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d102      	bne.n	8001988 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001982:	2304      	movs	r3, #4
 8001984:	623b      	str	r3, [r7, #32]
          break;
 8001986:	e013      	b.n	80019b0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	2b01      	cmp	r3, #1
 800198e:	d105      	bne.n	800199c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001990:	2308      	movs	r3, #8
 8001992:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	69fa      	ldr	r2, [r7, #28]
 8001998:	611a      	str	r2, [r3, #16]
          break;
 800199a:	e009      	b.n	80019b0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800199c:	2308      	movs	r3, #8
 800199e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	69fa      	ldr	r2, [r7, #28]
 80019a4:	615a      	str	r2, [r3, #20]
          break;
 80019a6:	e003      	b.n	80019b0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80019a8:	2300      	movs	r3, #0
 80019aa:	623b      	str	r3, [r7, #32]
          break;
 80019ac:	e000      	b.n	80019b0 <HAL_GPIO_Init+0x130>
          break;
 80019ae:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80019b0:	69bb      	ldr	r3, [r7, #24]
 80019b2:	2bff      	cmp	r3, #255	@ 0xff
 80019b4:	d801      	bhi.n	80019ba <HAL_GPIO_Init+0x13a>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	e001      	b.n	80019be <HAL_GPIO_Init+0x13e>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	3304      	adds	r3, #4
 80019be:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80019c0:	69bb      	ldr	r3, [r7, #24]
 80019c2:	2bff      	cmp	r3, #255	@ 0xff
 80019c4:	d802      	bhi.n	80019cc <HAL_GPIO_Init+0x14c>
 80019c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019c8:	009b      	lsls	r3, r3, #2
 80019ca:	e002      	b.n	80019d2 <HAL_GPIO_Init+0x152>
 80019cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019ce:	3b08      	subs	r3, #8
 80019d0:	009b      	lsls	r3, r3, #2
 80019d2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	210f      	movs	r1, #15
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	fa01 f303 	lsl.w	r3, r1, r3
 80019e0:	43db      	mvns	r3, r3
 80019e2:	401a      	ands	r2, r3
 80019e4:	6a39      	ldr	r1, [r7, #32]
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	fa01 f303 	lsl.w	r3, r1, r3
 80019ec:	431a      	orrs	r2, r3
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	f000 80a9 	beq.w	8001b52 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a00:	4b4a      	ldr	r3, [pc, #296]	@ (8001b2c <HAL_GPIO_Init+0x2ac>)
 8001a02:	699b      	ldr	r3, [r3, #24]
 8001a04:	4a49      	ldr	r2, [pc, #292]	@ (8001b2c <HAL_GPIO_Init+0x2ac>)
 8001a06:	f043 0301 	orr.w	r3, r3, #1
 8001a0a:	6193      	str	r3, [r2, #24]
 8001a0c:	4b47      	ldr	r3, [pc, #284]	@ (8001b2c <HAL_GPIO_Init+0x2ac>)
 8001a0e:	699b      	ldr	r3, [r3, #24]
 8001a10:	f003 0301 	and.w	r3, r3, #1
 8001a14:	60bb      	str	r3, [r7, #8]
 8001a16:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001a18:	4a45      	ldr	r2, [pc, #276]	@ (8001b30 <HAL_GPIO_Init+0x2b0>)
 8001a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a1c:	089b      	lsrs	r3, r3, #2
 8001a1e:	3302      	adds	r3, #2
 8001a20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a24:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a28:	f003 0303 	and.w	r3, r3, #3
 8001a2c:	009b      	lsls	r3, r3, #2
 8001a2e:	220f      	movs	r2, #15
 8001a30:	fa02 f303 	lsl.w	r3, r2, r3
 8001a34:	43db      	mvns	r3, r3
 8001a36:	68fa      	ldr	r2, [r7, #12]
 8001a38:	4013      	ands	r3, r2
 8001a3a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	4a3d      	ldr	r2, [pc, #244]	@ (8001b34 <HAL_GPIO_Init+0x2b4>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d00d      	beq.n	8001a60 <HAL_GPIO_Init+0x1e0>
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	4a3c      	ldr	r2, [pc, #240]	@ (8001b38 <HAL_GPIO_Init+0x2b8>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d007      	beq.n	8001a5c <HAL_GPIO_Init+0x1dc>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	4a3b      	ldr	r2, [pc, #236]	@ (8001b3c <HAL_GPIO_Init+0x2bc>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d101      	bne.n	8001a58 <HAL_GPIO_Init+0x1d8>
 8001a54:	2302      	movs	r3, #2
 8001a56:	e004      	b.n	8001a62 <HAL_GPIO_Init+0x1e2>
 8001a58:	2303      	movs	r3, #3
 8001a5a:	e002      	b.n	8001a62 <HAL_GPIO_Init+0x1e2>
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	e000      	b.n	8001a62 <HAL_GPIO_Init+0x1e2>
 8001a60:	2300      	movs	r3, #0
 8001a62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a64:	f002 0203 	and.w	r2, r2, #3
 8001a68:	0092      	lsls	r2, r2, #2
 8001a6a:	4093      	lsls	r3, r2
 8001a6c:	68fa      	ldr	r2, [r7, #12]
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a72:	492f      	ldr	r1, [pc, #188]	@ (8001b30 <HAL_GPIO_Init+0x2b0>)
 8001a74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a76:	089b      	lsrs	r3, r3, #2
 8001a78:	3302      	adds	r3, #2
 8001a7a:	68fa      	ldr	r2, [r7, #12]
 8001a7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d006      	beq.n	8001a9a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a8c:	4b2c      	ldr	r3, [pc, #176]	@ (8001b40 <HAL_GPIO_Init+0x2c0>)
 8001a8e:	689a      	ldr	r2, [r3, #8]
 8001a90:	492b      	ldr	r1, [pc, #172]	@ (8001b40 <HAL_GPIO_Init+0x2c0>)
 8001a92:	69bb      	ldr	r3, [r7, #24]
 8001a94:	4313      	orrs	r3, r2
 8001a96:	608b      	str	r3, [r1, #8]
 8001a98:	e006      	b.n	8001aa8 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a9a:	4b29      	ldr	r3, [pc, #164]	@ (8001b40 <HAL_GPIO_Init+0x2c0>)
 8001a9c:	689a      	ldr	r2, [r3, #8]
 8001a9e:	69bb      	ldr	r3, [r7, #24]
 8001aa0:	43db      	mvns	r3, r3
 8001aa2:	4927      	ldr	r1, [pc, #156]	@ (8001b40 <HAL_GPIO_Init+0x2c0>)
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d006      	beq.n	8001ac2 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ab4:	4b22      	ldr	r3, [pc, #136]	@ (8001b40 <HAL_GPIO_Init+0x2c0>)
 8001ab6:	68da      	ldr	r2, [r3, #12]
 8001ab8:	4921      	ldr	r1, [pc, #132]	@ (8001b40 <HAL_GPIO_Init+0x2c0>)
 8001aba:	69bb      	ldr	r3, [r7, #24]
 8001abc:	4313      	orrs	r3, r2
 8001abe:	60cb      	str	r3, [r1, #12]
 8001ac0:	e006      	b.n	8001ad0 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001ac2:	4b1f      	ldr	r3, [pc, #124]	@ (8001b40 <HAL_GPIO_Init+0x2c0>)
 8001ac4:	68da      	ldr	r2, [r3, #12]
 8001ac6:	69bb      	ldr	r3, [r7, #24]
 8001ac8:	43db      	mvns	r3, r3
 8001aca:	491d      	ldr	r1, [pc, #116]	@ (8001b40 <HAL_GPIO_Init+0x2c0>)
 8001acc:	4013      	ands	r3, r2
 8001ace:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d006      	beq.n	8001aea <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001adc:	4b18      	ldr	r3, [pc, #96]	@ (8001b40 <HAL_GPIO_Init+0x2c0>)
 8001ade:	685a      	ldr	r2, [r3, #4]
 8001ae0:	4917      	ldr	r1, [pc, #92]	@ (8001b40 <HAL_GPIO_Init+0x2c0>)
 8001ae2:	69bb      	ldr	r3, [r7, #24]
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	604b      	str	r3, [r1, #4]
 8001ae8:	e006      	b.n	8001af8 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001aea:	4b15      	ldr	r3, [pc, #84]	@ (8001b40 <HAL_GPIO_Init+0x2c0>)
 8001aec:	685a      	ldr	r2, [r3, #4]
 8001aee:	69bb      	ldr	r3, [r7, #24]
 8001af0:	43db      	mvns	r3, r3
 8001af2:	4913      	ldr	r1, [pc, #76]	@ (8001b40 <HAL_GPIO_Init+0x2c0>)
 8001af4:	4013      	ands	r3, r2
 8001af6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d01f      	beq.n	8001b44 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b04:	4b0e      	ldr	r3, [pc, #56]	@ (8001b40 <HAL_GPIO_Init+0x2c0>)
 8001b06:	681a      	ldr	r2, [r3, #0]
 8001b08:	490d      	ldr	r1, [pc, #52]	@ (8001b40 <HAL_GPIO_Init+0x2c0>)
 8001b0a:	69bb      	ldr	r3, [r7, #24]
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	600b      	str	r3, [r1, #0]
 8001b10:	e01f      	b.n	8001b52 <HAL_GPIO_Init+0x2d2>
 8001b12:	bf00      	nop
 8001b14:	10320000 	.word	0x10320000
 8001b18:	10310000 	.word	0x10310000
 8001b1c:	10220000 	.word	0x10220000
 8001b20:	10210000 	.word	0x10210000
 8001b24:	10120000 	.word	0x10120000
 8001b28:	10110000 	.word	0x10110000
 8001b2c:	40021000 	.word	0x40021000
 8001b30:	40010000 	.word	0x40010000
 8001b34:	40010800 	.word	0x40010800
 8001b38:	40010c00 	.word	0x40010c00
 8001b3c:	40011000 	.word	0x40011000
 8001b40:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b44:	4b0b      	ldr	r3, [pc, #44]	@ (8001b74 <HAL_GPIO_Init+0x2f4>)
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	69bb      	ldr	r3, [r7, #24]
 8001b4a:	43db      	mvns	r3, r3
 8001b4c:	4909      	ldr	r1, [pc, #36]	@ (8001b74 <HAL_GPIO_Init+0x2f4>)
 8001b4e:	4013      	ands	r3, r2
 8001b50:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b54:	3301      	adds	r3, #1
 8001b56:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b5e:	fa22 f303 	lsr.w	r3, r2, r3
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	f47f ae96 	bne.w	8001894 <HAL_GPIO_Init+0x14>
  }
}
 8001b68:	bf00      	nop
 8001b6a:	bf00      	nop
 8001b6c:	372c      	adds	r7, #44	@ 0x2c
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bc80      	pop	{r7}
 8001b72:	4770      	bx	lr
 8001b74:	40010400 	.word	0x40010400

08001b78 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b085      	sub	sp, #20
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
 8001b80:	460b      	mov	r3, r1
 8001b82:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	689a      	ldr	r2, [r3, #8]
 8001b88:	887b      	ldrh	r3, [r7, #2]
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d002      	beq.n	8001b96 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b90:	2301      	movs	r3, #1
 8001b92:	73fb      	strb	r3, [r7, #15]
 8001b94:	e001      	b.n	8001b9a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b96:	2300      	movs	r3, #0
 8001b98:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	3714      	adds	r7, #20
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bc80      	pop	{r7}
 8001ba4:	4770      	bx	lr

08001ba6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ba6:	b480      	push	{r7}
 8001ba8:	b083      	sub	sp, #12
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	6078      	str	r0, [r7, #4]
 8001bae:	460b      	mov	r3, r1
 8001bb0:	807b      	strh	r3, [r7, #2]
 8001bb2:	4613      	mov	r3, r2
 8001bb4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001bb6:	787b      	ldrb	r3, [r7, #1]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d003      	beq.n	8001bc4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bbc:	887a      	ldrh	r2, [r7, #2]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001bc2:	e003      	b.n	8001bcc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001bc4:	887b      	ldrh	r3, [r7, #2]
 8001bc6:	041a      	lsls	r2, r3, #16
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	611a      	str	r2, [r3, #16]
}
 8001bcc:	bf00      	nop
 8001bce:	370c      	adds	r7, #12
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bc80      	pop	{r7}
 8001bd4:	4770      	bx	lr

08001bd6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001bd6:	b480      	push	{r7}
 8001bd8:	b085      	sub	sp, #20
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	6078      	str	r0, [r7, #4]
 8001bde:	460b      	mov	r3, r1
 8001be0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	68db      	ldr	r3, [r3, #12]
 8001be6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001be8:	887a      	ldrh	r2, [r7, #2]
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	4013      	ands	r3, r2
 8001bee:	041a      	lsls	r2, r3, #16
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	43d9      	mvns	r1, r3
 8001bf4:	887b      	ldrh	r3, [r7, #2]
 8001bf6:	400b      	ands	r3, r1
 8001bf8:	431a      	orrs	r2, r3
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	611a      	str	r2, [r3, #16]
}
 8001bfe:	bf00      	nop
 8001c00:	3714      	adds	r7, #20
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bc80      	pop	{r7}
 8001c06:	4770      	bx	lr

08001c08 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b086      	sub	sp, #24
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d101      	bne.n	8001c1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e272      	b.n	8002100 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 0301 	and.w	r3, r3, #1
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	f000 8087 	beq.w	8001d36 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c28:	4b92      	ldr	r3, [pc, #584]	@ (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	f003 030c 	and.w	r3, r3, #12
 8001c30:	2b04      	cmp	r3, #4
 8001c32:	d00c      	beq.n	8001c4e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c34:	4b8f      	ldr	r3, [pc, #572]	@ (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f003 030c 	and.w	r3, r3, #12
 8001c3c:	2b08      	cmp	r3, #8
 8001c3e:	d112      	bne.n	8001c66 <HAL_RCC_OscConfig+0x5e>
 8001c40:	4b8c      	ldr	r3, [pc, #560]	@ (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c4c:	d10b      	bne.n	8001c66 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c4e:	4b89      	ldr	r3, [pc, #548]	@ (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d06c      	beq.n	8001d34 <HAL_RCC_OscConfig+0x12c>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d168      	bne.n	8001d34 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e24c      	b.n	8002100 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c6e:	d106      	bne.n	8001c7e <HAL_RCC_OscConfig+0x76>
 8001c70:	4b80      	ldr	r3, [pc, #512]	@ (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a7f      	ldr	r2, [pc, #508]	@ (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001c76:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c7a:	6013      	str	r3, [r2, #0]
 8001c7c:	e02e      	b.n	8001cdc <HAL_RCC_OscConfig+0xd4>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d10c      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x98>
 8001c86:	4b7b      	ldr	r3, [pc, #492]	@ (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a7a      	ldr	r2, [pc, #488]	@ (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001c8c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c90:	6013      	str	r3, [r2, #0]
 8001c92:	4b78      	ldr	r3, [pc, #480]	@ (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a77      	ldr	r2, [pc, #476]	@ (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001c98:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c9c:	6013      	str	r3, [r2, #0]
 8001c9e:	e01d      	b.n	8001cdc <HAL_RCC_OscConfig+0xd4>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001ca8:	d10c      	bne.n	8001cc4 <HAL_RCC_OscConfig+0xbc>
 8001caa:	4b72      	ldr	r3, [pc, #456]	@ (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a71      	ldr	r2, [pc, #452]	@ (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001cb0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001cb4:	6013      	str	r3, [r2, #0]
 8001cb6:	4b6f      	ldr	r3, [pc, #444]	@ (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a6e      	ldr	r2, [pc, #440]	@ (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001cbc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001cc0:	6013      	str	r3, [r2, #0]
 8001cc2:	e00b      	b.n	8001cdc <HAL_RCC_OscConfig+0xd4>
 8001cc4:	4b6b      	ldr	r3, [pc, #428]	@ (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a6a      	ldr	r2, [pc, #424]	@ (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001cca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001cce:	6013      	str	r3, [r2, #0]
 8001cd0:	4b68      	ldr	r3, [pc, #416]	@ (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a67      	ldr	r2, [pc, #412]	@ (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001cd6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001cda:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d013      	beq.n	8001d0c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ce4:	f7ff fcb4 	bl	8001650 <HAL_GetTick>
 8001ce8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cea:	e008      	b.n	8001cfe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cec:	f7ff fcb0 	bl	8001650 <HAL_GetTick>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	2b64      	cmp	r3, #100	@ 0x64
 8001cf8:	d901      	bls.n	8001cfe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e200      	b.n	8002100 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cfe:	4b5d      	ldr	r3, [pc, #372]	@ (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d0f0      	beq.n	8001cec <HAL_RCC_OscConfig+0xe4>
 8001d0a:	e014      	b.n	8001d36 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d0c:	f7ff fca0 	bl	8001650 <HAL_GetTick>
 8001d10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d12:	e008      	b.n	8001d26 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d14:	f7ff fc9c 	bl	8001650 <HAL_GetTick>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	1ad3      	subs	r3, r2, r3
 8001d1e:	2b64      	cmp	r3, #100	@ 0x64
 8001d20:	d901      	bls.n	8001d26 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001d22:	2303      	movs	r3, #3
 8001d24:	e1ec      	b.n	8002100 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d26:	4b53      	ldr	r3, [pc, #332]	@ (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d1f0      	bne.n	8001d14 <HAL_RCC_OscConfig+0x10c>
 8001d32:	e000      	b.n	8001d36 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 0302 	and.w	r3, r3, #2
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d063      	beq.n	8001e0a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d42:	4b4c      	ldr	r3, [pc, #304]	@ (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	f003 030c 	and.w	r3, r3, #12
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d00b      	beq.n	8001d66 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001d4e:	4b49      	ldr	r3, [pc, #292]	@ (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	f003 030c 	and.w	r3, r3, #12
 8001d56:	2b08      	cmp	r3, #8
 8001d58:	d11c      	bne.n	8001d94 <HAL_RCC_OscConfig+0x18c>
 8001d5a:	4b46      	ldr	r3, [pc, #280]	@ (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d116      	bne.n	8001d94 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d66:	4b43      	ldr	r3, [pc, #268]	@ (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 0302 	and.w	r3, r3, #2
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d005      	beq.n	8001d7e <HAL_RCC_OscConfig+0x176>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	691b      	ldr	r3, [r3, #16]
 8001d76:	2b01      	cmp	r3, #1
 8001d78:	d001      	beq.n	8001d7e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e1c0      	b.n	8002100 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d7e:	4b3d      	ldr	r3, [pc, #244]	@ (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	695b      	ldr	r3, [r3, #20]
 8001d8a:	00db      	lsls	r3, r3, #3
 8001d8c:	4939      	ldr	r1, [pc, #228]	@ (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d92:	e03a      	b.n	8001e0a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	691b      	ldr	r3, [r3, #16]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d020      	beq.n	8001dde <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d9c:	4b36      	ldr	r3, [pc, #216]	@ (8001e78 <HAL_RCC_OscConfig+0x270>)
 8001d9e:	2201      	movs	r2, #1
 8001da0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001da2:	f7ff fc55 	bl	8001650 <HAL_GetTick>
 8001da6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001da8:	e008      	b.n	8001dbc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001daa:	f7ff fc51 	bl	8001650 <HAL_GetTick>
 8001dae:	4602      	mov	r2, r0
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	1ad3      	subs	r3, r2, r3
 8001db4:	2b02      	cmp	r3, #2
 8001db6:	d901      	bls.n	8001dbc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001db8:	2303      	movs	r3, #3
 8001dba:	e1a1      	b.n	8002100 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dbc:	4b2d      	ldr	r3, [pc, #180]	@ (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f003 0302 	and.w	r3, r3, #2
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d0f0      	beq.n	8001daa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dc8:	4b2a      	ldr	r3, [pc, #168]	@ (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	695b      	ldr	r3, [r3, #20]
 8001dd4:	00db      	lsls	r3, r3, #3
 8001dd6:	4927      	ldr	r1, [pc, #156]	@ (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	600b      	str	r3, [r1, #0]
 8001ddc:	e015      	b.n	8001e0a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dde:	4b26      	ldr	r3, [pc, #152]	@ (8001e78 <HAL_RCC_OscConfig+0x270>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001de4:	f7ff fc34 	bl	8001650 <HAL_GetTick>
 8001de8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dea:	e008      	b.n	8001dfe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dec:	f7ff fc30 	bl	8001650 <HAL_GetTick>
 8001df0:	4602      	mov	r2, r0
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	2b02      	cmp	r3, #2
 8001df8:	d901      	bls.n	8001dfe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	e180      	b.n	8002100 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dfe:	4b1d      	ldr	r3, [pc, #116]	@ (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 0302 	and.w	r3, r3, #2
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d1f0      	bne.n	8001dec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 0308 	and.w	r3, r3, #8
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d03a      	beq.n	8001e8c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	699b      	ldr	r3, [r3, #24]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d019      	beq.n	8001e52 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e1e:	4b17      	ldr	r3, [pc, #92]	@ (8001e7c <HAL_RCC_OscConfig+0x274>)
 8001e20:	2201      	movs	r2, #1
 8001e22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e24:	f7ff fc14 	bl	8001650 <HAL_GetTick>
 8001e28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e2a:	e008      	b.n	8001e3e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e2c:	f7ff fc10 	bl	8001650 <HAL_GetTick>
 8001e30:	4602      	mov	r2, r0
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	2b02      	cmp	r3, #2
 8001e38:	d901      	bls.n	8001e3e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	e160      	b.n	8002100 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e3e:	4b0d      	ldr	r3, [pc, #52]	@ (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001e40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e42:	f003 0302 	and.w	r3, r3, #2
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d0f0      	beq.n	8001e2c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001e4a:	2001      	movs	r0, #1
 8001e4c:	f000 fa9c 	bl	8002388 <RCC_Delay>
 8001e50:	e01c      	b.n	8001e8c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e52:	4b0a      	ldr	r3, [pc, #40]	@ (8001e7c <HAL_RCC_OscConfig+0x274>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e58:	f7ff fbfa 	bl	8001650 <HAL_GetTick>
 8001e5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e5e:	e00f      	b.n	8001e80 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e60:	f7ff fbf6 	bl	8001650 <HAL_GetTick>
 8001e64:	4602      	mov	r2, r0
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	2b02      	cmp	r3, #2
 8001e6c:	d908      	bls.n	8001e80 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001e6e:	2303      	movs	r3, #3
 8001e70:	e146      	b.n	8002100 <HAL_RCC_OscConfig+0x4f8>
 8001e72:	bf00      	nop
 8001e74:	40021000 	.word	0x40021000
 8001e78:	42420000 	.word	0x42420000
 8001e7c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e80:	4b92      	ldr	r3, [pc, #584]	@ (80020cc <HAL_RCC_OscConfig+0x4c4>)
 8001e82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e84:	f003 0302 	and.w	r3, r3, #2
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d1e9      	bne.n	8001e60 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f003 0304 	and.w	r3, r3, #4
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	f000 80a6 	beq.w	8001fe6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e9e:	4b8b      	ldr	r3, [pc, #556]	@ (80020cc <HAL_RCC_OscConfig+0x4c4>)
 8001ea0:	69db      	ldr	r3, [r3, #28]
 8001ea2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d10d      	bne.n	8001ec6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001eaa:	4b88      	ldr	r3, [pc, #544]	@ (80020cc <HAL_RCC_OscConfig+0x4c4>)
 8001eac:	69db      	ldr	r3, [r3, #28]
 8001eae:	4a87      	ldr	r2, [pc, #540]	@ (80020cc <HAL_RCC_OscConfig+0x4c4>)
 8001eb0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001eb4:	61d3      	str	r3, [r2, #28]
 8001eb6:	4b85      	ldr	r3, [pc, #532]	@ (80020cc <HAL_RCC_OscConfig+0x4c4>)
 8001eb8:	69db      	ldr	r3, [r3, #28]
 8001eba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ebe:	60bb      	str	r3, [r7, #8]
 8001ec0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ec6:	4b82      	ldr	r3, [pc, #520]	@ (80020d0 <HAL_RCC_OscConfig+0x4c8>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d118      	bne.n	8001f04 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ed2:	4b7f      	ldr	r3, [pc, #508]	@ (80020d0 <HAL_RCC_OscConfig+0x4c8>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a7e      	ldr	r2, [pc, #504]	@ (80020d0 <HAL_RCC_OscConfig+0x4c8>)
 8001ed8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001edc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ede:	f7ff fbb7 	bl	8001650 <HAL_GetTick>
 8001ee2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ee4:	e008      	b.n	8001ef8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ee6:	f7ff fbb3 	bl	8001650 <HAL_GetTick>
 8001eea:	4602      	mov	r2, r0
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	1ad3      	subs	r3, r2, r3
 8001ef0:	2b64      	cmp	r3, #100	@ 0x64
 8001ef2:	d901      	bls.n	8001ef8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001ef4:	2303      	movs	r3, #3
 8001ef6:	e103      	b.n	8002100 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ef8:	4b75      	ldr	r3, [pc, #468]	@ (80020d0 <HAL_RCC_OscConfig+0x4c8>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d0f0      	beq.n	8001ee6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	68db      	ldr	r3, [r3, #12]
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	d106      	bne.n	8001f1a <HAL_RCC_OscConfig+0x312>
 8001f0c:	4b6f      	ldr	r3, [pc, #444]	@ (80020cc <HAL_RCC_OscConfig+0x4c4>)
 8001f0e:	6a1b      	ldr	r3, [r3, #32]
 8001f10:	4a6e      	ldr	r2, [pc, #440]	@ (80020cc <HAL_RCC_OscConfig+0x4c4>)
 8001f12:	f043 0301 	orr.w	r3, r3, #1
 8001f16:	6213      	str	r3, [r2, #32]
 8001f18:	e02d      	b.n	8001f76 <HAL_RCC_OscConfig+0x36e>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	68db      	ldr	r3, [r3, #12]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d10c      	bne.n	8001f3c <HAL_RCC_OscConfig+0x334>
 8001f22:	4b6a      	ldr	r3, [pc, #424]	@ (80020cc <HAL_RCC_OscConfig+0x4c4>)
 8001f24:	6a1b      	ldr	r3, [r3, #32]
 8001f26:	4a69      	ldr	r2, [pc, #420]	@ (80020cc <HAL_RCC_OscConfig+0x4c4>)
 8001f28:	f023 0301 	bic.w	r3, r3, #1
 8001f2c:	6213      	str	r3, [r2, #32]
 8001f2e:	4b67      	ldr	r3, [pc, #412]	@ (80020cc <HAL_RCC_OscConfig+0x4c4>)
 8001f30:	6a1b      	ldr	r3, [r3, #32]
 8001f32:	4a66      	ldr	r2, [pc, #408]	@ (80020cc <HAL_RCC_OscConfig+0x4c4>)
 8001f34:	f023 0304 	bic.w	r3, r3, #4
 8001f38:	6213      	str	r3, [r2, #32]
 8001f3a:	e01c      	b.n	8001f76 <HAL_RCC_OscConfig+0x36e>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	2b05      	cmp	r3, #5
 8001f42:	d10c      	bne.n	8001f5e <HAL_RCC_OscConfig+0x356>
 8001f44:	4b61      	ldr	r3, [pc, #388]	@ (80020cc <HAL_RCC_OscConfig+0x4c4>)
 8001f46:	6a1b      	ldr	r3, [r3, #32]
 8001f48:	4a60      	ldr	r2, [pc, #384]	@ (80020cc <HAL_RCC_OscConfig+0x4c4>)
 8001f4a:	f043 0304 	orr.w	r3, r3, #4
 8001f4e:	6213      	str	r3, [r2, #32]
 8001f50:	4b5e      	ldr	r3, [pc, #376]	@ (80020cc <HAL_RCC_OscConfig+0x4c4>)
 8001f52:	6a1b      	ldr	r3, [r3, #32]
 8001f54:	4a5d      	ldr	r2, [pc, #372]	@ (80020cc <HAL_RCC_OscConfig+0x4c4>)
 8001f56:	f043 0301 	orr.w	r3, r3, #1
 8001f5a:	6213      	str	r3, [r2, #32]
 8001f5c:	e00b      	b.n	8001f76 <HAL_RCC_OscConfig+0x36e>
 8001f5e:	4b5b      	ldr	r3, [pc, #364]	@ (80020cc <HAL_RCC_OscConfig+0x4c4>)
 8001f60:	6a1b      	ldr	r3, [r3, #32]
 8001f62:	4a5a      	ldr	r2, [pc, #360]	@ (80020cc <HAL_RCC_OscConfig+0x4c4>)
 8001f64:	f023 0301 	bic.w	r3, r3, #1
 8001f68:	6213      	str	r3, [r2, #32]
 8001f6a:	4b58      	ldr	r3, [pc, #352]	@ (80020cc <HAL_RCC_OscConfig+0x4c4>)
 8001f6c:	6a1b      	ldr	r3, [r3, #32]
 8001f6e:	4a57      	ldr	r2, [pc, #348]	@ (80020cc <HAL_RCC_OscConfig+0x4c4>)
 8001f70:	f023 0304 	bic.w	r3, r3, #4
 8001f74:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	68db      	ldr	r3, [r3, #12]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d015      	beq.n	8001faa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f7e:	f7ff fb67 	bl	8001650 <HAL_GetTick>
 8001f82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f84:	e00a      	b.n	8001f9c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f86:	f7ff fb63 	bl	8001650 <HAL_GetTick>
 8001f8a:	4602      	mov	r2, r0
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	1ad3      	subs	r3, r2, r3
 8001f90:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d901      	bls.n	8001f9c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001f98:	2303      	movs	r3, #3
 8001f9a:	e0b1      	b.n	8002100 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f9c:	4b4b      	ldr	r3, [pc, #300]	@ (80020cc <HAL_RCC_OscConfig+0x4c4>)
 8001f9e:	6a1b      	ldr	r3, [r3, #32]
 8001fa0:	f003 0302 	and.w	r3, r3, #2
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d0ee      	beq.n	8001f86 <HAL_RCC_OscConfig+0x37e>
 8001fa8:	e014      	b.n	8001fd4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001faa:	f7ff fb51 	bl	8001650 <HAL_GetTick>
 8001fae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fb0:	e00a      	b.n	8001fc8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fb2:	f7ff fb4d 	bl	8001650 <HAL_GetTick>
 8001fb6:	4602      	mov	r2, r0
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	1ad3      	subs	r3, r2, r3
 8001fbc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d901      	bls.n	8001fc8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001fc4:	2303      	movs	r3, #3
 8001fc6:	e09b      	b.n	8002100 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fc8:	4b40      	ldr	r3, [pc, #256]	@ (80020cc <HAL_RCC_OscConfig+0x4c4>)
 8001fca:	6a1b      	ldr	r3, [r3, #32]
 8001fcc:	f003 0302 	and.w	r3, r3, #2
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d1ee      	bne.n	8001fb2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001fd4:	7dfb      	ldrb	r3, [r7, #23]
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d105      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fda:	4b3c      	ldr	r3, [pc, #240]	@ (80020cc <HAL_RCC_OscConfig+0x4c4>)
 8001fdc:	69db      	ldr	r3, [r3, #28]
 8001fde:	4a3b      	ldr	r2, [pc, #236]	@ (80020cc <HAL_RCC_OscConfig+0x4c4>)
 8001fe0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001fe4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	69db      	ldr	r3, [r3, #28]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	f000 8087 	beq.w	80020fe <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ff0:	4b36      	ldr	r3, [pc, #216]	@ (80020cc <HAL_RCC_OscConfig+0x4c4>)
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f003 030c 	and.w	r3, r3, #12
 8001ff8:	2b08      	cmp	r3, #8
 8001ffa:	d061      	beq.n	80020c0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	69db      	ldr	r3, [r3, #28]
 8002000:	2b02      	cmp	r3, #2
 8002002:	d146      	bne.n	8002092 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002004:	4b33      	ldr	r3, [pc, #204]	@ (80020d4 <HAL_RCC_OscConfig+0x4cc>)
 8002006:	2200      	movs	r2, #0
 8002008:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800200a:	f7ff fb21 	bl	8001650 <HAL_GetTick>
 800200e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002010:	e008      	b.n	8002024 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002012:	f7ff fb1d 	bl	8001650 <HAL_GetTick>
 8002016:	4602      	mov	r2, r0
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	1ad3      	subs	r3, r2, r3
 800201c:	2b02      	cmp	r3, #2
 800201e:	d901      	bls.n	8002024 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002020:	2303      	movs	r3, #3
 8002022:	e06d      	b.n	8002100 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002024:	4b29      	ldr	r3, [pc, #164]	@ (80020cc <HAL_RCC_OscConfig+0x4c4>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800202c:	2b00      	cmp	r3, #0
 800202e:	d1f0      	bne.n	8002012 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6a1b      	ldr	r3, [r3, #32]
 8002034:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002038:	d108      	bne.n	800204c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800203a:	4b24      	ldr	r3, [pc, #144]	@ (80020cc <HAL_RCC_OscConfig+0x4c4>)
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	689b      	ldr	r3, [r3, #8]
 8002046:	4921      	ldr	r1, [pc, #132]	@ (80020cc <HAL_RCC_OscConfig+0x4c4>)
 8002048:	4313      	orrs	r3, r2
 800204a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800204c:	4b1f      	ldr	r3, [pc, #124]	@ (80020cc <HAL_RCC_OscConfig+0x4c4>)
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6a19      	ldr	r1, [r3, #32]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800205c:	430b      	orrs	r3, r1
 800205e:	491b      	ldr	r1, [pc, #108]	@ (80020cc <HAL_RCC_OscConfig+0x4c4>)
 8002060:	4313      	orrs	r3, r2
 8002062:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002064:	4b1b      	ldr	r3, [pc, #108]	@ (80020d4 <HAL_RCC_OscConfig+0x4cc>)
 8002066:	2201      	movs	r2, #1
 8002068:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800206a:	f7ff faf1 	bl	8001650 <HAL_GetTick>
 800206e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002070:	e008      	b.n	8002084 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002072:	f7ff faed 	bl	8001650 <HAL_GetTick>
 8002076:	4602      	mov	r2, r0
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	1ad3      	subs	r3, r2, r3
 800207c:	2b02      	cmp	r3, #2
 800207e:	d901      	bls.n	8002084 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002080:	2303      	movs	r3, #3
 8002082:	e03d      	b.n	8002100 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002084:	4b11      	ldr	r3, [pc, #68]	@ (80020cc <HAL_RCC_OscConfig+0x4c4>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800208c:	2b00      	cmp	r3, #0
 800208e:	d0f0      	beq.n	8002072 <HAL_RCC_OscConfig+0x46a>
 8002090:	e035      	b.n	80020fe <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002092:	4b10      	ldr	r3, [pc, #64]	@ (80020d4 <HAL_RCC_OscConfig+0x4cc>)
 8002094:	2200      	movs	r2, #0
 8002096:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002098:	f7ff fada 	bl	8001650 <HAL_GetTick>
 800209c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800209e:	e008      	b.n	80020b2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020a0:	f7ff fad6 	bl	8001650 <HAL_GetTick>
 80020a4:	4602      	mov	r2, r0
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	2b02      	cmp	r3, #2
 80020ac:	d901      	bls.n	80020b2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80020ae:	2303      	movs	r3, #3
 80020b0:	e026      	b.n	8002100 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020b2:	4b06      	ldr	r3, [pc, #24]	@ (80020cc <HAL_RCC_OscConfig+0x4c4>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d1f0      	bne.n	80020a0 <HAL_RCC_OscConfig+0x498>
 80020be:	e01e      	b.n	80020fe <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	69db      	ldr	r3, [r3, #28]
 80020c4:	2b01      	cmp	r3, #1
 80020c6:	d107      	bne.n	80020d8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80020c8:	2301      	movs	r3, #1
 80020ca:	e019      	b.n	8002100 <HAL_RCC_OscConfig+0x4f8>
 80020cc:	40021000 	.word	0x40021000
 80020d0:	40007000 	.word	0x40007000
 80020d4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80020d8:	4b0b      	ldr	r3, [pc, #44]	@ (8002108 <HAL_RCC_OscConfig+0x500>)
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6a1b      	ldr	r3, [r3, #32]
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d106      	bne.n	80020fa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020f6:	429a      	cmp	r2, r3
 80020f8:	d001      	beq.n	80020fe <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e000      	b.n	8002100 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80020fe:	2300      	movs	r3, #0
}
 8002100:	4618      	mov	r0, r3
 8002102:	3718      	adds	r7, #24
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}
 8002108:	40021000 	.word	0x40021000

0800210c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b084      	sub	sp, #16
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
 8002114:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d101      	bne.n	8002120 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	e0d0      	b.n	80022c2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002120:	4b6a      	ldr	r3, [pc, #424]	@ (80022cc <HAL_RCC_ClockConfig+0x1c0>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 0307 	and.w	r3, r3, #7
 8002128:	683a      	ldr	r2, [r7, #0]
 800212a:	429a      	cmp	r2, r3
 800212c:	d910      	bls.n	8002150 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800212e:	4b67      	ldr	r3, [pc, #412]	@ (80022cc <HAL_RCC_ClockConfig+0x1c0>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f023 0207 	bic.w	r2, r3, #7
 8002136:	4965      	ldr	r1, [pc, #404]	@ (80022cc <HAL_RCC_ClockConfig+0x1c0>)
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	4313      	orrs	r3, r2
 800213c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800213e:	4b63      	ldr	r3, [pc, #396]	@ (80022cc <HAL_RCC_ClockConfig+0x1c0>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 0307 	and.w	r3, r3, #7
 8002146:	683a      	ldr	r2, [r7, #0]
 8002148:	429a      	cmp	r2, r3
 800214a:	d001      	beq.n	8002150 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	e0b8      	b.n	80022c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 0302 	and.w	r3, r3, #2
 8002158:	2b00      	cmp	r3, #0
 800215a:	d020      	beq.n	800219e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f003 0304 	and.w	r3, r3, #4
 8002164:	2b00      	cmp	r3, #0
 8002166:	d005      	beq.n	8002174 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002168:	4b59      	ldr	r3, [pc, #356]	@ (80022d0 <HAL_RCC_ClockConfig+0x1c4>)
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	4a58      	ldr	r2, [pc, #352]	@ (80022d0 <HAL_RCC_ClockConfig+0x1c4>)
 800216e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002172:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f003 0308 	and.w	r3, r3, #8
 800217c:	2b00      	cmp	r3, #0
 800217e:	d005      	beq.n	800218c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002180:	4b53      	ldr	r3, [pc, #332]	@ (80022d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	4a52      	ldr	r2, [pc, #328]	@ (80022d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002186:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800218a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800218c:	4b50      	ldr	r3, [pc, #320]	@ (80022d0 <HAL_RCC_ClockConfig+0x1c4>)
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	494d      	ldr	r1, [pc, #308]	@ (80022d0 <HAL_RCC_ClockConfig+0x1c4>)
 800219a:	4313      	orrs	r3, r2
 800219c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 0301 	and.w	r3, r3, #1
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d040      	beq.n	800222c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d107      	bne.n	80021c2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021b2:	4b47      	ldr	r3, [pc, #284]	@ (80022d0 <HAL_RCC_ClockConfig+0x1c4>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d115      	bne.n	80021ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e07f      	b.n	80022c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	2b02      	cmp	r3, #2
 80021c8:	d107      	bne.n	80021da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021ca:	4b41      	ldr	r3, [pc, #260]	@ (80022d0 <HAL_RCC_ClockConfig+0x1c4>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d109      	bne.n	80021ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e073      	b.n	80022c2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021da:	4b3d      	ldr	r3, [pc, #244]	@ (80022d0 <HAL_RCC_ClockConfig+0x1c4>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f003 0302 	and.w	r3, r3, #2
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d101      	bne.n	80021ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e06b      	b.n	80022c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021ea:	4b39      	ldr	r3, [pc, #228]	@ (80022d0 <HAL_RCC_ClockConfig+0x1c4>)
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	f023 0203 	bic.w	r2, r3, #3
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	4936      	ldr	r1, [pc, #216]	@ (80022d0 <HAL_RCC_ClockConfig+0x1c4>)
 80021f8:	4313      	orrs	r3, r2
 80021fa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021fc:	f7ff fa28 	bl	8001650 <HAL_GetTick>
 8002200:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002202:	e00a      	b.n	800221a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002204:	f7ff fa24 	bl	8001650 <HAL_GetTick>
 8002208:	4602      	mov	r2, r0
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	1ad3      	subs	r3, r2, r3
 800220e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002212:	4293      	cmp	r3, r2
 8002214:	d901      	bls.n	800221a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002216:	2303      	movs	r3, #3
 8002218:	e053      	b.n	80022c2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800221a:	4b2d      	ldr	r3, [pc, #180]	@ (80022d0 <HAL_RCC_ClockConfig+0x1c4>)
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	f003 020c 	and.w	r2, r3, #12
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	429a      	cmp	r2, r3
 800222a:	d1eb      	bne.n	8002204 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800222c:	4b27      	ldr	r3, [pc, #156]	@ (80022cc <HAL_RCC_ClockConfig+0x1c0>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 0307 	and.w	r3, r3, #7
 8002234:	683a      	ldr	r2, [r7, #0]
 8002236:	429a      	cmp	r2, r3
 8002238:	d210      	bcs.n	800225c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800223a:	4b24      	ldr	r3, [pc, #144]	@ (80022cc <HAL_RCC_ClockConfig+0x1c0>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f023 0207 	bic.w	r2, r3, #7
 8002242:	4922      	ldr	r1, [pc, #136]	@ (80022cc <HAL_RCC_ClockConfig+0x1c0>)
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	4313      	orrs	r3, r2
 8002248:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800224a:	4b20      	ldr	r3, [pc, #128]	@ (80022cc <HAL_RCC_ClockConfig+0x1c0>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f003 0307 	and.w	r3, r3, #7
 8002252:	683a      	ldr	r2, [r7, #0]
 8002254:	429a      	cmp	r2, r3
 8002256:	d001      	beq.n	800225c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	e032      	b.n	80022c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f003 0304 	and.w	r3, r3, #4
 8002264:	2b00      	cmp	r3, #0
 8002266:	d008      	beq.n	800227a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002268:	4b19      	ldr	r3, [pc, #100]	@ (80022d0 <HAL_RCC_ClockConfig+0x1c4>)
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	4916      	ldr	r1, [pc, #88]	@ (80022d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002276:	4313      	orrs	r3, r2
 8002278:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 0308 	and.w	r3, r3, #8
 8002282:	2b00      	cmp	r3, #0
 8002284:	d009      	beq.n	800229a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002286:	4b12      	ldr	r3, [pc, #72]	@ (80022d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	691b      	ldr	r3, [r3, #16]
 8002292:	00db      	lsls	r3, r3, #3
 8002294:	490e      	ldr	r1, [pc, #56]	@ (80022d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002296:	4313      	orrs	r3, r2
 8002298:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800229a:	f000 f821 	bl	80022e0 <HAL_RCC_GetSysClockFreq>
 800229e:	4602      	mov	r2, r0
 80022a0:	4b0b      	ldr	r3, [pc, #44]	@ (80022d0 <HAL_RCC_ClockConfig+0x1c4>)
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	091b      	lsrs	r3, r3, #4
 80022a6:	f003 030f 	and.w	r3, r3, #15
 80022aa:	490a      	ldr	r1, [pc, #40]	@ (80022d4 <HAL_RCC_ClockConfig+0x1c8>)
 80022ac:	5ccb      	ldrb	r3, [r1, r3]
 80022ae:	fa22 f303 	lsr.w	r3, r2, r3
 80022b2:	4a09      	ldr	r2, [pc, #36]	@ (80022d8 <HAL_RCC_ClockConfig+0x1cc>)
 80022b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80022b6:	4b09      	ldr	r3, [pc, #36]	@ (80022dc <HAL_RCC_ClockConfig+0x1d0>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4618      	mov	r0, r3
 80022bc:	f7ff f986 	bl	80015cc <HAL_InitTick>

  return HAL_OK;
 80022c0:	2300      	movs	r3, #0
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3710      	adds	r7, #16
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	40022000 	.word	0x40022000
 80022d0:	40021000 	.word	0x40021000
 80022d4:	08002bec 	.word	0x08002bec
 80022d8:	2000004c 	.word	0x2000004c
 80022dc:	20000050 	.word	0x20000050

080022e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b087      	sub	sp, #28
 80022e4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80022e6:	2300      	movs	r3, #0
 80022e8:	60fb      	str	r3, [r7, #12]
 80022ea:	2300      	movs	r3, #0
 80022ec:	60bb      	str	r3, [r7, #8]
 80022ee:	2300      	movs	r3, #0
 80022f0:	617b      	str	r3, [r7, #20]
 80022f2:	2300      	movs	r3, #0
 80022f4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80022f6:	2300      	movs	r3, #0
 80022f8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80022fa:	4b1e      	ldr	r3, [pc, #120]	@ (8002374 <HAL_RCC_GetSysClockFreq+0x94>)
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	f003 030c 	and.w	r3, r3, #12
 8002306:	2b04      	cmp	r3, #4
 8002308:	d002      	beq.n	8002310 <HAL_RCC_GetSysClockFreq+0x30>
 800230a:	2b08      	cmp	r3, #8
 800230c:	d003      	beq.n	8002316 <HAL_RCC_GetSysClockFreq+0x36>
 800230e:	e027      	b.n	8002360 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002310:	4b19      	ldr	r3, [pc, #100]	@ (8002378 <HAL_RCC_GetSysClockFreq+0x98>)
 8002312:	613b      	str	r3, [r7, #16]
      break;
 8002314:	e027      	b.n	8002366 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	0c9b      	lsrs	r3, r3, #18
 800231a:	f003 030f 	and.w	r3, r3, #15
 800231e:	4a17      	ldr	r2, [pc, #92]	@ (800237c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002320:	5cd3      	ldrb	r3, [r2, r3]
 8002322:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800232a:	2b00      	cmp	r3, #0
 800232c:	d010      	beq.n	8002350 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800232e:	4b11      	ldr	r3, [pc, #68]	@ (8002374 <HAL_RCC_GetSysClockFreq+0x94>)
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	0c5b      	lsrs	r3, r3, #17
 8002334:	f003 0301 	and.w	r3, r3, #1
 8002338:	4a11      	ldr	r2, [pc, #68]	@ (8002380 <HAL_RCC_GetSysClockFreq+0xa0>)
 800233a:	5cd3      	ldrb	r3, [r2, r3]
 800233c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	4a0d      	ldr	r2, [pc, #52]	@ (8002378 <HAL_RCC_GetSysClockFreq+0x98>)
 8002342:	fb03 f202 	mul.w	r2, r3, r2
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	fbb2 f3f3 	udiv	r3, r2, r3
 800234c:	617b      	str	r3, [r7, #20]
 800234e:	e004      	b.n	800235a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	4a0c      	ldr	r2, [pc, #48]	@ (8002384 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002354:	fb02 f303 	mul.w	r3, r2, r3
 8002358:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	613b      	str	r3, [r7, #16]
      break;
 800235e:	e002      	b.n	8002366 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002360:	4b05      	ldr	r3, [pc, #20]	@ (8002378 <HAL_RCC_GetSysClockFreq+0x98>)
 8002362:	613b      	str	r3, [r7, #16]
      break;
 8002364:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002366:	693b      	ldr	r3, [r7, #16]
}
 8002368:	4618      	mov	r0, r3
 800236a:	371c      	adds	r7, #28
 800236c:	46bd      	mov	sp, r7
 800236e:	bc80      	pop	{r7}
 8002370:	4770      	bx	lr
 8002372:	bf00      	nop
 8002374:	40021000 	.word	0x40021000
 8002378:	007a1200 	.word	0x007a1200
 800237c:	08002bfc 	.word	0x08002bfc
 8002380:	08002c0c 	.word	0x08002c0c
 8002384:	003d0900 	.word	0x003d0900

08002388 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002388:	b480      	push	{r7}
 800238a:	b085      	sub	sp, #20
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002390:	4b0a      	ldr	r3, [pc, #40]	@ (80023bc <RCC_Delay+0x34>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a0a      	ldr	r2, [pc, #40]	@ (80023c0 <RCC_Delay+0x38>)
 8002396:	fba2 2303 	umull	r2, r3, r2, r3
 800239a:	0a5b      	lsrs	r3, r3, #9
 800239c:	687a      	ldr	r2, [r7, #4]
 800239e:	fb02 f303 	mul.w	r3, r2, r3
 80023a2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80023a4:	bf00      	nop
  }
  while (Delay --);
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	1e5a      	subs	r2, r3, #1
 80023aa:	60fa      	str	r2, [r7, #12]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d1f9      	bne.n	80023a4 <RCC_Delay+0x1c>
}
 80023b0:	bf00      	nop
 80023b2:	bf00      	nop
 80023b4:	3714      	adds	r7, #20
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bc80      	pop	{r7}
 80023ba:	4770      	bx	lr
 80023bc:	2000004c 	.word	0x2000004c
 80023c0:	10624dd3 	.word	0x10624dd3

080023c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b082      	sub	sp, #8
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d101      	bne.n	80023d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	e041      	b.n	800245a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d106      	bne.n	80023f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2200      	movs	r2, #0
 80023e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80023ea:	6878      	ldr	r0, [r7, #4]
 80023ec:	f7ff f852 	bl	8001494 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2202      	movs	r2, #2
 80023f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	3304      	adds	r3, #4
 8002400:	4619      	mov	r1, r3
 8002402:	4610      	mov	r0, r2
 8002404:	f000 fa56 	bl	80028b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2201      	movs	r2, #1
 800240c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2201      	movs	r2, #1
 8002414:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2201      	movs	r2, #1
 800241c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2201      	movs	r2, #1
 8002424:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2201      	movs	r2, #1
 800242c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2201      	movs	r2, #1
 8002434:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2201      	movs	r2, #1
 800243c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2201      	movs	r2, #1
 8002444:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2201      	movs	r2, #1
 800244c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2201      	movs	r2, #1
 8002454:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002458:	2300      	movs	r3, #0
}
 800245a:	4618      	mov	r0, r3
 800245c:	3708      	adds	r7, #8
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
	...

08002464 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002464:	b480      	push	{r7}
 8002466:	b085      	sub	sp, #20
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002472:	b2db      	uxtb	r3, r3
 8002474:	2b01      	cmp	r3, #1
 8002476:	d001      	beq.n	800247c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	e035      	b.n	80024e8 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2202      	movs	r2, #2
 8002480:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	68da      	ldr	r2, [r3, #12]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f042 0201 	orr.w	r2, r2, #1
 8002492:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a16      	ldr	r2, [pc, #88]	@ (80024f4 <HAL_TIM_Base_Start_IT+0x90>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d009      	beq.n	80024b2 <HAL_TIM_Base_Start_IT+0x4e>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80024a6:	d004      	beq.n	80024b2 <HAL_TIM_Base_Start_IT+0x4e>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a12      	ldr	r2, [pc, #72]	@ (80024f8 <HAL_TIM_Base_Start_IT+0x94>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d111      	bne.n	80024d6 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	f003 0307 	and.w	r3, r3, #7
 80024bc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	2b06      	cmp	r3, #6
 80024c2:	d010      	beq.n	80024e6 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f042 0201 	orr.w	r2, r2, #1
 80024d2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024d4:	e007      	b.n	80024e6 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f042 0201 	orr.w	r2, r2, #1
 80024e4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80024e6:	2300      	movs	r3, #0
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	3714      	adds	r7, #20
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bc80      	pop	{r7}
 80024f0:	4770      	bx	lr
 80024f2:	bf00      	nop
 80024f4:	40012c00 	.word	0x40012c00
 80024f8:	40000400 	.word	0x40000400

080024fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b084      	sub	sp, #16
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	68db      	ldr	r3, [r3, #12]
 800250a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	691b      	ldr	r3, [r3, #16]
 8002512:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	f003 0302 	and.w	r3, r3, #2
 800251a:	2b00      	cmp	r3, #0
 800251c:	d020      	beq.n	8002560 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	f003 0302 	and.w	r3, r3, #2
 8002524:	2b00      	cmp	r3, #0
 8002526:	d01b      	beq.n	8002560 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f06f 0202 	mvn.w	r2, #2
 8002530:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2201      	movs	r2, #1
 8002536:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	699b      	ldr	r3, [r3, #24]
 800253e:	f003 0303 	and.w	r3, r3, #3
 8002542:	2b00      	cmp	r3, #0
 8002544:	d003      	beq.n	800254e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	f000 f998 	bl	800287c <HAL_TIM_IC_CaptureCallback>
 800254c:	e005      	b.n	800255a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	f000 f98b 	bl	800286a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002554:	6878      	ldr	r0, [r7, #4]
 8002556:	f000 f99a 	bl	800288e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2200      	movs	r2, #0
 800255e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	f003 0304 	and.w	r3, r3, #4
 8002566:	2b00      	cmp	r3, #0
 8002568:	d020      	beq.n	80025ac <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	f003 0304 	and.w	r3, r3, #4
 8002570:	2b00      	cmp	r3, #0
 8002572:	d01b      	beq.n	80025ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f06f 0204 	mvn.w	r2, #4
 800257c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2202      	movs	r2, #2
 8002582:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	699b      	ldr	r3, [r3, #24]
 800258a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800258e:	2b00      	cmp	r3, #0
 8002590:	d003      	beq.n	800259a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f000 f972 	bl	800287c <HAL_TIM_IC_CaptureCallback>
 8002598:	e005      	b.n	80025a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	f000 f965 	bl	800286a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025a0:	6878      	ldr	r0, [r7, #4]
 80025a2:	f000 f974 	bl	800288e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2200      	movs	r2, #0
 80025aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	f003 0308 	and.w	r3, r3, #8
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d020      	beq.n	80025f8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	f003 0308 	and.w	r3, r3, #8
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d01b      	beq.n	80025f8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f06f 0208 	mvn.w	r2, #8
 80025c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2204      	movs	r2, #4
 80025ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	69db      	ldr	r3, [r3, #28]
 80025d6:	f003 0303 	and.w	r3, r3, #3
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d003      	beq.n	80025e6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	f000 f94c 	bl	800287c <HAL_TIM_IC_CaptureCallback>
 80025e4:	e005      	b.n	80025f2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f000 f93f 	bl	800286a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025ec:	6878      	ldr	r0, [r7, #4]
 80025ee:	f000 f94e 	bl	800288e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2200      	movs	r2, #0
 80025f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	f003 0310 	and.w	r3, r3, #16
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d020      	beq.n	8002644 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	f003 0310 	and.w	r3, r3, #16
 8002608:	2b00      	cmp	r3, #0
 800260a:	d01b      	beq.n	8002644 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f06f 0210 	mvn.w	r2, #16
 8002614:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2208      	movs	r2, #8
 800261a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	69db      	ldr	r3, [r3, #28]
 8002622:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002626:	2b00      	cmp	r3, #0
 8002628:	d003      	beq.n	8002632 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	f000 f926 	bl	800287c <HAL_TIM_IC_CaptureCallback>
 8002630:	e005      	b.n	800263e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f000 f919 	bl	800286a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002638:	6878      	ldr	r0, [r7, #4]
 800263a:	f000 f928 	bl	800288e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2200      	movs	r2, #0
 8002642:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	f003 0301 	and.w	r3, r3, #1
 800264a:	2b00      	cmp	r3, #0
 800264c:	d00c      	beq.n	8002668 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	f003 0301 	and.w	r3, r3, #1
 8002654:	2b00      	cmp	r3, #0
 8002656:	d007      	beq.n	8002668 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f06f 0201 	mvn.w	r2, #1
 8002660:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f7fe fe5c 	bl	8001320 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800266e:	2b00      	cmp	r3, #0
 8002670:	d00c      	beq.n	800268c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002678:	2b00      	cmp	r3, #0
 800267a:	d007      	beq.n	800268c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002684:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	f000 fa6f 	bl	8002b6a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002692:	2b00      	cmp	r3, #0
 8002694:	d00c      	beq.n	80026b0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800269c:	2b00      	cmp	r3, #0
 800269e:	d007      	beq.n	80026b0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80026a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	f000 f8f8 	bl	80028a0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	f003 0320 	and.w	r3, r3, #32
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d00c      	beq.n	80026d4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	f003 0320 	and.w	r3, r3, #32
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d007      	beq.n	80026d4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f06f 0220 	mvn.w	r2, #32
 80026cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	f000 fa42 	bl	8002b58 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80026d4:	bf00      	nop
 80026d6:	3710      	adds	r7, #16
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}

080026dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b084      	sub	sp, #16
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
 80026e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80026e6:	2300      	movs	r3, #0
 80026e8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d101      	bne.n	80026f8 <HAL_TIM_ConfigClockSource+0x1c>
 80026f4:	2302      	movs	r3, #2
 80026f6:	e0b4      	b.n	8002862 <HAL_TIM_ConfigClockSource+0x186>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2201      	movs	r2, #1
 80026fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2202      	movs	r2, #2
 8002704:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002716:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800271e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	68ba      	ldr	r2, [r7, #8]
 8002726:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002730:	d03e      	beq.n	80027b0 <HAL_TIM_ConfigClockSource+0xd4>
 8002732:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002736:	f200 8087 	bhi.w	8002848 <HAL_TIM_ConfigClockSource+0x16c>
 800273a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800273e:	f000 8086 	beq.w	800284e <HAL_TIM_ConfigClockSource+0x172>
 8002742:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002746:	d87f      	bhi.n	8002848 <HAL_TIM_ConfigClockSource+0x16c>
 8002748:	2b70      	cmp	r3, #112	@ 0x70
 800274a:	d01a      	beq.n	8002782 <HAL_TIM_ConfigClockSource+0xa6>
 800274c:	2b70      	cmp	r3, #112	@ 0x70
 800274e:	d87b      	bhi.n	8002848 <HAL_TIM_ConfigClockSource+0x16c>
 8002750:	2b60      	cmp	r3, #96	@ 0x60
 8002752:	d050      	beq.n	80027f6 <HAL_TIM_ConfigClockSource+0x11a>
 8002754:	2b60      	cmp	r3, #96	@ 0x60
 8002756:	d877      	bhi.n	8002848 <HAL_TIM_ConfigClockSource+0x16c>
 8002758:	2b50      	cmp	r3, #80	@ 0x50
 800275a:	d03c      	beq.n	80027d6 <HAL_TIM_ConfigClockSource+0xfa>
 800275c:	2b50      	cmp	r3, #80	@ 0x50
 800275e:	d873      	bhi.n	8002848 <HAL_TIM_ConfigClockSource+0x16c>
 8002760:	2b40      	cmp	r3, #64	@ 0x40
 8002762:	d058      	beq.n	8002816 <HAL_TIM_ConfigClockSource+0x13a>
 8002764:	2b40      	cmp	r3, #64	@ 0x40
 8002766:	d86f      	bhi.n	8002848 <HAL_TIM_ConfigClockSource+0x16c>
 8002768:	2b30      	cmp	r3, #48	@ 0x30
 800276a:	d064      	beq.n	8002836 <HAL_TIM_ConfigClockSource+0x15a>
 800276c:	2b30      	cmp	r3, #48	@ 0x30
 800276e:	d86b      	bhi.n	8002848 <HAL_TIM_ConfigClockSource+0x16c>
 8002770:	2b20      	cmp	r3, #32
 8002772:	d060      	beq.n	8002836 <HAL_TIM_ConfigClockSource+0x15a>
 8002774:	2b20      	cmp	r3, #32
 8002776:	d867      	bhi.n	8002848 <HAL_TIM_ConfigClockSource+0x16c>
 8002778:	2b00      	cmp	r3, #0
 800277a:	d05c      	beq.n	8002836 <HAL_TIM_ConfigClockSource+0x15a>
 800277c:	2b10      	cmp	r3, #16
 800277e:	d05a      	beq.n	8002836 <HAL_TIM_ConfigClockSource+0x15a>
 8002780:	e062      	b.n	8002848 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002792:	f000 f96a 	bl	8002a6a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80027a4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	68ba      	ldr	r2, [r7, #8]
 80027ac:	609a      	str	r2, [r3, #8]
      break;
 80027ae:	e04f      	b.n	8002850 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80027c0:	f000 f953 	bl	8002a6a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	689a      	ldr	r2, [r3, #8]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80027d2:	609a      	str	r2, [r3, #8]
      break;
 80027d4:	e03c      	b.n	8002850 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80027e2:	461a      	mov	r2, r3
 80027e4:	f000 f8ca 	bl	800297c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	2150      	movs	r1, #80	@ 0x50
 80027ee:	4618      	mov	r0, r3
 80027f0:	f000 f921 	bl	8002a36 <TIM_ITRx_SetConfig>
      break;
 80027f4:	e02c      	b.n	8002850 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002802:	461a      	mov	r2, r3
 8002804:	f000 f8e8 	bl	80029d8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	2160      	movs	r1, #96	@ 0x60
 800280e:	4618      	mov	r0, r3
 8002810:	f000 f911 	bl	8002a36 <TIM_ITRx_SetConfig>
      break;
 8002814:	e01c      	b.n	8002850 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002822:	461a      	mov	r2, r3
 8002824:	f000 f8aa 	bl	800297c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	2140      	movs	r1, #64	@ 0x40
 800282e:	4618      	mov	r0, r3
 8002830:	f000 f901 	bl	8002a36 <TIM_ITRx_SetConfig>
      break;
 8002834:	e00c      	b.n	8002850 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4619      	mov	r1, r3
 8002840:	4610      	mov	r0, r2
 8002842:	f000 f8f8 	bl	8002a36 <TIM_ITRx_SetConfig>
      break;
 8002846:	e003      	b.n	8002850 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	73fb      	strb	r3, [r7, #15]
      break;
 800284c:	e000      	b.n	8002850 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800284e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2201      	movs	r2, #1
 8002854:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2200      	movs	r2, #0
 800285c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002860:	7bfb      	ldrb	r3, [r7, #15]
}
 8002862:	4618      	mov	r0, r3
 8002864:	3710      	adds	r7, #16
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}

0800286a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800286a:	b480      	push	{r7}
 800286c:	b083      	sub	sp, #12
 800286e:	af00      	add	r7, sp, #0
 8002870:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002872:	bf00      	nop
 8002874:	370c      	adds	r7, #12
 8002876:	46bd      	mov	sp, r7
 8002878:	bc80      	pop	{r7}
 800287a:	4770      	bx	lr

0800287c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800287c:	b480      	push	{r7}
 800287e:	b083      	sub	sp, #12
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002884:	bf00      	nop
 8002886:	370c      	adds	r7, #12
 8002888:	46bd      	mov	sp, r7
 800288a:	bc80      	pop	{r7}
 800288c:	4770      	bx	lr

0800288e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800288e:	b480      	push	{r7}
 8002890:	b083      	sub	sp, #12
 8002892:	af00      	add	r7, sp, #0
 8002894:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002896:	bf00      	nop
 8002898:	370c      	adds	r7, #12
 800289a:	46bd      	mov	sp, r7
 800289c:	bc80      	pop	{r7}
 800289e:	4770      	bx	lr

080028a0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b083      	sub	sp, #12
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80028a8:	bf00      	nop
 80028aa:	370c      	adds	r7, #12
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bc80      	pop	{r7}
 80028b0:	4770      	bx	lr
	...

080028b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b085      	sub	sp, #20
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
 80028bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	4a2b      	ldr	r2, [pc, #172]	@ (8002974 <TIM_Base_SetConfig+0xc0>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d007      	beq.n	80028dc <TIM_Base_SetConfig+0x28>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028d2:	d003      	beq.n	80028dc <TIM_Base_SetConfig+0x28>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	4a28      	ldr	r2, [pc, #160]	@ (8002978 <TIM_Base_SetConfig+0xc4>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d108      	bne.n	80028ee <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80028e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	68fa      	ldr	r2, [r7, #12]
 80028ea:	4313      	orrs	r3, r2
 80028ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	4a20      	ldr	r2, [pc, #128]	@ (8002974 <TIM_Base_SetConfig+0xc0>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d007      	beq.n	8002906 <TIM_Base_SetConfig+0x52>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028fc:	d003      	beq.n	8002906 <TIM_Base_SetConfig+0x52>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4a1d      	ldr	r2, [pc, #116]	@ (8002978 <TIM_Base_SetConfig+0xc4>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d108      	bne.n	8002918 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800290c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	68db      	ldr	r3, [r3, #12]
 8002912:	68fa      	ldr	r2, [r7, #12]
 8002914:	4313      	orrs	r3, r2
 8002916:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	695b      	ldr	r3, [r3, #20]
 8002922:	4313      	orrs	r3, r2
 8002924:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	68fa      	ldr	r2, [r7, #12]
 800292a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	689a      	ldr	r2, [r3, #8]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	4a0d      	ldr	r2, [pc, #52]	@ (8002974 <TIM_Base_SetConfig+0xc0>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d103      	bne.n	800294c <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	691a      	ldr	r2, [r3, #16]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2201      	movs	r2, #1
 8002950:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	691b      	ldr	r3, [r3, #16]
 8002956:	f003 0301 	and.w	r3, r3, #1
 800295a:	2b00      	cmp	r3, #0
 800295c:	d005      	beq.n	800296a <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	691b      	ldr	r3, [r3, #16]
 8002962:	f023 0201 	bic.w	r2, r3, #1
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	611a      	str	r2, [r3, #16]
  }
}
 800296a:	bf00      	nop
 800296c:	3714      	adds	r7, #20
 800296e:	46bd      	mov	sp, r7
 8002970:	bc80      	pop	{r7}
 8002972:	4770      	bx	lr
 8002974:	40012c00 	.word	0x40012c00
 8002978:	40000400 	.word	0x40000400

0800297c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800297c:	b480      	push	{r7}
 800297e:	b087      	sub	sp, #28
 8002980:	af00      	add	r7, sp, #0
 8002982:	60f8      	str	r0, [r7, #12]
 8002984:	60b9      	str	r1, [r7, #8]
 8002986:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	6a1b      	ldr	r3, [r3, #32]
 800298c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	6a1b      	ldr	r3, [r3, #32]
 8002992:	f023 0201 	bic.w	r2, r3, #1
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	699b      	ldr	r3, [r3, #24]
 800299e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80029a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	011b      	lsls	r3, r3, #4
 80029ac:	693a      	ldr	r2, [r7, #16]
 80029ae:	4313      	orrs	r3, r2
 80029b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	f023 030a 	bic.w	r3, r3, #10
 80029b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80029ba:	697a      	ldr	r2, [r7, #20]
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	4313      	orrs	r3, r2
 80029c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	693a      	ldr	r2, [r7, #16]
 80029c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	697a      	ldr	r2, [r7, #20]
 80029cc:	621a      	str	r2, [r3, #32]
}
 80029ce:	bf00      	nop
 80029d0:	371c      	adds	r7, #28
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bc80      	pop	{r7}
 80029d6:	4770      	bx	lr

080029d8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80029d8:	b480      	push	{r7}
 80029da:	b087      	sub	sp, #28
 80029dc:	af00      	add	r7, sp, #0
 80029de:	60f8      	str	r0, [r7, #12]
 80029e0:	60b9      	str	r1, [r7, #8]
 80029e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	6a1b      	ldr	r3, [r3, #32]
 80029e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	6a1b      	ldr	r3, [r3, #32]
 80029ee:	f023 0210 	bic.w	r2, r3, #16
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	699b      	ldr	r3, [r3, #24]
 80029fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002a02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	031b      	lsls	r3, r3, #12
 8002a08:	693a      	ldr	r2, [r7, #16]
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002a14:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	011b      	lsls	r3, r3, #4
 8002a1a:	697a      	ldr	r2, [r7, #20]
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	693a      	ldr	r2, [r7, #16]
 8002a24:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	697a      	ldr	r2, [r7, #20]
 8002a2a:	621a      	str	r2, [r3, #32]
}
 8002a2c:	bf00      	nop
 8002a2e:	371c      	adds	r7, #28
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bc80      	pop	{r7}
 8002a34:	4770      	bx	lr

08002a36 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002a36:	b480      	push	{r7}
 8002a38:	b085      	sub	sp, #20
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	6078      	str	r0, [r7, #4]
 8002a3e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a4c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002a4e:	683a      	ldr	r2, [r7, #0]
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	4313      	orrs	r3, r2
 8002a54:	f043 0307 	orr.w	r3, r3, #7
 8002a58:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	68fa      	ldr	r2, [r7, #12]
 8002a5e:	609a      	str	r2, [r3, #8]
}
 8002a60:	bf00      	nop
 8002a62:	3714      	adds	r7, #20
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bc80      	pop	{r7}
 8002a68:	4770      	bx	lr

08002a6a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002a6a:	b480      	push	{r7}
 8002a6c:	b087      	sub	sp, #28
 8002a6e:	af00      	add	r7, sp, #0
 8002a70:	60f8      	str	r0, [r7, #12]
 8002a72:	60b9      	str	r1, [r7, #8]
 8002a74:	607a      	str	r2, [r7, #4]
 8002a76:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002a84:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	021a      	lsls	r2, r3, #8
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	431a      	orrs	r2, r3
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	4313      	orrs	r3, r2
 8002a92:	697a      	ldr	r2, [r7, #20]
 8002a94:	4313      	orrs	r3, r2
 8002a96:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	697a      	ldr	r2, [r7, #20]
 8002a9c:	609a      	str	r2, [r3, #8]
}
 8002a9e:	bf00      	nop
 8002aa0:	371c      	adds	r7, #28
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bc80      	pop	{r7}
 8002aa6:	4770      	bx	lr

08002aa8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b085      	sub	sp, #20
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
 8002ab0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d101      	bne.n	8002ac0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002abc:	2302      	movs	r3, #2
 8002abe:	e041      	b.n	8002b44 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2202      	movs	r2, #2
 8002acc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ae6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	68fa      	ldr	r2, [r7, #12]
 8002aee:	4313      	orrs	r3, r2
 8002af0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	68fa      	ldr	r2, [r7, #12]
 8002af8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a14      	ldr	r2, [pc, #80]	@ (8002b50 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d009      	beq.n	8002b18 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b0c:	d004      	beq.n	8002b18 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a10      	ldr	r2, [pc, #64]	@ (8002b54 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d10c      	bne.n	8002b32 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002b1e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	68ba      	ldr	r2, [r7, #8]
 8002b26:	4313      	orrs	r3, r2
 8002b28:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	68ba      	ldr	r2, [r7, #8]
 8002b30:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2201      	movs	r2, #1
 8002b36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002b42:	2300      	movs	r3, #0
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	3714      	adds	r7, #20
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bc80      	pop	{r7}
 8002b4c:	4770      	bx	lr
 8002b4e:	bf00      	nop
 8002b50:	40012c00 	.word	0x40012c00
 8002b54:	40000400 	.word	0x40000400

08002b58 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b083      	sub	sp, #12
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002b60:	bf00      	nop
 8002b62:	370c      	adds	r7, #12
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bc80      	pop	{r7}
 8002b68:	4770      	bx	lr

08002b6a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002b6a:	b480      	push	{r7}
 8002b6c:	b083      	sub	sp, #12
 8002b6e:	af00      	add	r7, sp, #0
 8002b70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002b72:	bf00      	nop
 8002b74:	370c      	adds	r7, #12
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bc80      	pop	{r7}
 8002b7a:	4770      	bx	lr

08002b7c <memset>:
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	4402      	add	r2, r0
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d100      	bne.n	8002b86 <memset+0xa>
 8002b84:	4770      	bx	lr
 8002b86:	f803 1b01 	strb.w	r1, [r3], #1
 8002b8a:	e7f9      	b.n	8002b80 <memset+0x4>

08002b8c <__libc_init_array>:
 8002b8c:	b570      	push	{r4, r5, r6, lr}
 8002b8e:	2600      	movs	r6, #0
 8002b90:	4d0c      	ldr	r5, [pc, #48]	@ (8002bc4 <__libc_init_array+0x38>)
 8002b92:	4c0d      	ldr	r4, [pc, #52]	@ (8002bc8 <__libc_init_array+0x3c>)
 8002b94:	1b64      	subs	r4, r4, r5
 8002b96:	10a4      	asrs	r4, r4, #2
 8002b98:	42a6      	cmp	r6, r4
 8002b9a:	d109      	bne.n	8002bb0 <__libc_init_array+0x24>
 8002b9c:	f000 f81a 	bl	8002bd4 <_init>
 8002ba0:	2600      	movs	r6, #0
 8002ba2:	4d0a      	ldr	r5, [pc, #40]	@ (8002bcc <__libc_init_array+0x40>)
 8002ba4:	4c0a      	ldr	r4, [pc, #40]	@ (8002bd0 <__libc_init_array+0x44>)
 8002ba6:	1b64      	subs	r4, r4, r5
 8002ba8:	10a4      	asrs	r4, r4, #2
 8002baa:	42a6      	cmp	r6, r4
 8002bac:	d105      	bne.n	8002bba <__libc_init_array+0x2e>
 8002bae:	bd70      	pop	{r4, r5, r6, pc}
 8002bb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bb4:	4798      	blx	r3
 8002bb6:	3601      	adds	r6, #1
 8002bb8:	e7ee      	b.n	8002b98 <__libc_init_array+0xc>
 8002bba:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bbe:	4798      	blx	r3
 8002bc0:	3601      	adds	r6, #1
 8002bc2:	e7f2      	b.n	8002baa <__libc_init_array+0x1e>
 8002bc4:	08002c10 	.word	0x08002c10
 8002bc8:	08002c10 	.word	0x08002c10
 8002bcc:	08002c10 	.word	0x08002c10
 8002bd0:	08002c14 	.word	0x08002c14

08002bd4 <_init>:
 8002bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bd6:	bf00      	nop
 8002bd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bda:	bc08      	pop	{r3}
 8002bdc:	469e      	mov	lr, r3
 8002bde:	4770      	bx	lr

08002be0 <_fini>:
 8002be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002be2:	bf00      	nop
 8002be4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002be6:	bc08      	pop	{r3}
 8002be8:	469e      	mov	lr, r3
 8002bea:	4770      	bx	lr
